:PROPERTIES:
:ID:       80690da6-d65a-418b-945e-5a5b01e20476
:END:
#+title: Lang - Test
#+hugo_base_dir:../



#+BEGIN_SRC rustic :crates '((regex . 0.2)(primal . 0.3.2)) :output results
extern crate primal;

use primal::Sieve;

fn num_divisors(n: usize, primes: &Sieve) -> Option<usize> {
    match primes.factor(n) {
        Ok(factors) => Some(factors.into_iter().fold(1, |acc, (_, x)| acc * (x + 1))),
        Err(_) => None,
    }
}

fn main() {
    println!("24 days of Rust - primal (day 2)");
    let sieve = Sieve::new(10000);
    let suspect = 5273;
    println!("{} is prime: {}", suspect, sieve.is_prime(suspect));
    let not_a_prime = 1024;
    println!("{} is prime: {}", not_a_prime, sieve.is_prime(not_a_prime));
    let n = 1000;
    match sieve.primes_from(0).nth(n - 1) {
        Some(number) => println!("{}th prime is {}", n, number),
        None => println!("I don't know anything about {}th prime.", n),
    }
    println!("{:?}", sieve.factor(2610));
    println!("{:?}", num_divisors(2610, &sieve));
}
#+END_SRC

#+RESULTS:
: 24 days of Rust - primal (day 2)
: 5273 is prime: true
: 1024 is prime: false
: 1000th prime is 7919
: Ok([(2, 1), (3, 2), (5, 1), (29, 1)])
: Some(24)

#+begin_src cpp -n :exports both :results output verbatim
#include <iostream>
int main(){
    std::cout<<"Hello, World.\n";
    return 0;
}
#+end_src

#+RESULTS:
: Hello, World.


#+begin_src csharp -n :exports both :results output verbatim

// Hello World! program
namespace HelloWorld
{
    class Hello {
        static void Main(string[] args)
        {
            System.Console.WriteLine("Hello World!");
        }
    }
}
#+end_src

#+RESULTS:
: Hello World!
