:PROPERTIES:
:ID:       acdc67cd-43a2-4060-b54a-cb80a48050b8
:END:
#+title: Haskell Programming
#+hugo_base_dir:../
#+filetags: :org:haskell:org-roam:example:



* Basics
**
** Map
#+begin_src haskell :exports both
import Control.Monad
:{
map
  (\x -> x*x + x + 10)
  [1..10]
:}
#+end_src

#+RESULTS:
| 12 | 16 | 22 | 30 | 40 | 52 | 66 | 82 | 100 | 120 |
* Applications
** Derivatives
#+begin_src haskell
-- | alias R to be a Double as an approximate of a real number
type R = Double

type Time = R
type Position = R

type Derivative = (R -> R) -> R -> R

derivative :: R -> Derivative
derivative dt x t = (x (t + dt/2) - x(t - dt/2)) / dt

carPosition :: Time -> Position
carPosition t = cos t

carVelocity :: Time -> Velocity
carVelocity = derivative 0.01 carPosition

derivative 0.00001 carPosition 1

#+end_src

#+RESULTS:
: -0.8414709848025835
