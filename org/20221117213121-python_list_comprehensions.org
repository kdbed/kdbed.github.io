:PROPERTIES:
:ID:       cc939e8e-19ed-4491-bb1a-d4c68eb440f4
:END:
#+title: Python - List Comprehensions
#+filetags: :python:


* Python - List Comprehensions

List comprehensions are a compact way of defining a list by looping
through another list or other data structure. Let's say we want to
double every element in a list. Without list comprehensions:

#+BEGIN_SRC python
  sample_list = [4, 5, 6, 7]

  new_list = []
  for i in range(len(sample_list)):
      new_list.append(sample_list[i]*2)

  print(new_list)
#+END_SRC

#+BEGIN_EXAMPLE
  [8, 10, 12, 14]
#+END_EXAMPLE

A simplified way to do this:

#+BEGIN_SRC python
  newer_list = [2*num for num in sample_list]
  print(newer_list)
#+END_SRC

#+BEGIN_EXAMPLE
  [8, 10, 12, 14]
#+END_EXAMPLE

** List Comprehensions on lists of strings

#+BEGIN_SRC python
  sample_strings = ["python", "is", "awesome!"]
  upper_case_strings = [s.upper() for s in sample_strings]
  print(upper_case_strings)
#+END_SRC

#+BEGIN_EXAMPLE
  ['PYTHON', 'IS', 'AWESOME!']
#+END_EXAMPLE

#+BEGIN_SRC python
  words = ["zen", "of", "python"]
  word_zero = [word[0] for word in words]
  print(word_zero)
#+END_SRC

#+BEGIN_EXAMPLE
  ['z', 'o', 'p']
#+END_EXAMPLE

** Looping and filtering in one step

List comprehensions also allow conditionals in their definitions:

#+BEGIN_SRC python
  nums = [1, 3, 5, 7, 9, 11, 13, 15]
  new_nums = [num for num in nums if num < 9]
  print(new_nums)
#+END_SRC

#+BEGIN_EXAMPLE
  [1, 3, 5, 7]
#+END_EXAMPLE

** If-else statements in list comprehensions

#+BEGIN_SRC python
  nums2 = [1,2, 3, 5, 7, 9, 11, 13, 15]
  odd_even = ["even" if num % 2 == 0 else "odd" for num in nums2]
  print(odd_even)
#+END_SRC

#+BEGIN_EXAMPLE
  ['odd', 'even', 'odd', 'odd', 'odd', 'odd', 'odd', 'odd', 'odd']
#+END_EXAMPLE

#+BEGIN_SRC python
  nums = [1, 3, 5, 7, 9, 11, 13, 15]

  info = ["by 5" if num % 5 == 0 else "by 3" if num % 3 == 0 else "one" if num == 1 else "other" for num in nums]
  print(info)
#+END_SRC

#+BEGIN_EXAMPLE
  ['one', 'by 3', 'by 5', 'other', 'by 3', 'other', 'other', 'by 5']
#+END_EXAMPLE

** Defining a list comprehension from a dictionary

#+BEGIN_SRC python
  mapping = {"a": 10, "b": 20, "c": 30, "d": 40, "e": 50, "f": 60, "g": 70, "h": 80}

  reduced = [key for key,val in mapping.items() if val < 40]
  print(reduced)
#+END_SRC

#+BEGIN_EXAMPLE
  ['a', 'b', 'c']
#+END_EXAMPLE

#+BEGIN_SRC python
#+END_SRC
