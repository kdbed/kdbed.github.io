<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cryptography on Owlglass</title>
    <link>https://kdbed.github.io/tags/cryptography/</link>
    <description>Recent content in cryptography on Owlglass</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://kdbed.github.io/tags/cryptography/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Cracking - PDF</title>
      <link>https://kdbed.github.io/posts/cracking_pdf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/cracking_pdf/</guid>
      <description>fcrackzip fcrackzip -u -D -p /usr/share/wordlists/rockyou.txt </description>
    </item>
    
    <item>
      <title>sha1Cracker</title>
      <link>https://kdbed.github.io/posts/sha1cracker/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/sha1cracker/</guid>
      <description>Implementing a sha1 hash cracker in Rust usesha1::Digest;usestd::{env,error::Error,fs::File,io::{BufRead,BufReader},};constSHA1_HEX_STRING_LENGTH: usize =40;fn main()-&amp;gt; Result&amp;lt;(),Box&amp;lt;dynError&amp;gt;&amp;gt;{letargs: Vec&amp;lt;String&amp;gt;=env::args().collect();ifargs.len()!=3{println!(&amp;#34;Usage:&amp;#34;);println!(&amp;#34;sha1_cracker: &amp;lt;wordlist.txt&amp;gt; &amp;lt;sha1_hash&amp;gt;&amp;#34;);returnOk(());}lethash_to_crack=args[2].trim();ifhash_to_crack.len()!=SHA1_HEX_STRING_LENGTH{returnErr(&amp;#34;sha1 hash is not valid.&amp;#34;.into());}letwordlist_file=File::open(&amp;amp;args[1])?;letreader=BufReader::new(&amp;amp;wordlist_file);forlineinreader.lines(){letline=line?;letcommon_password=line.trim();ifhash_to_crack==&amp;amp;hex::encode(sha1::Sha1::digest(common_password.as_bytes())){println!(&amp;#34;Password found: {}&amp;#34;,&amp;amp;common_password);returnOk(());}}println!(&amp;#34;password not found in wordlist.&amp;#34;);Ok(())}Imports 
usesha1::Digest;usestd::{env,error::Error,fs::File,io::{BufRead,BufReader},};constSHA1_HEX_STRING_LENGTH: usize =40;Inputs 
letargs: Vec&amp;lt;String&amp;gt;=env::args().collect();ifargs.len()!=3{println!(&amp;#34;Usage:&amp;#34;);println!(&amp;#34;sha1_cracker: &amp;lt;wordlist.txt&amp;gt; &amp;lt;sha1_hash&amp;gt;&amp;#34;);returnOk(());}lethash_to_crack=args[2].trim();ifhash_to_crack.len()!=SHA1_HEX_STRING_LENGTH{returnErr(&amp;#34;sha1 hash is not valid.&amp;#34;.into());}Read File 
letwordlist_file=File::open(&amp;amp;args[1])?;letreader=BufReader::new(&amp;amp;wordlist_file);Check Pass 
forlineinreader.lines(){letline=line?;letcommon_password=line.trim();ifhash_to_crack==&amp;amp;hex::encode(sha1::Sha1::digest(common_password.as_bytes())){println!(&amp;#34;Password found: {}&amp;#34;,&amp;amp;common_password);returnOk(());}}Bibliography Black Hat Rust</description>
    </item>
    
    <item>
      <title>Wildcard Certificate</title>
      <link>https://kdbed.github.io/posts/wildcard_certificate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/wildcard_certificate/</guid>
      <description>Wildcare Certificates digicert
What is a SSL Wildcard Certificate?
A SSL/TLS Wildcard certificate is a single certificate with a wildcard character (*) in the domain name field. This allows the certificate to secure multiple sub domain names (hosts) pertaining to the same base domain.
For example, a wildcard certificate for *.(domainname).com, could be used for www.(domainname).com, mail.(domainname).com, store.(domainname).com, in addition to any additional sub domain name in the (domainname).com.
When a client checks the sub domain name in this type of certificate, it uses a shell expansion procedure to see if it matches.</description>
    </item>
    
  </channel>
</rss>
