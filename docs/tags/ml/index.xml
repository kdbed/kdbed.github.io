<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ML on Owlglass</title>
    <link>https://kdbed.github.io/tags/ml/</link>
    <description>Recent content in ML on Owlglass</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://kdbed.github.io/tags/ml/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Neural Networks</title>
      <link>https://kdbed.github.io/posts/neural_networks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/neural_networks/</guid>
      <description>Neural Networks 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 #include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;stdio.h&amp;gt; #include &amp;lt;math.h&amp;gt; // Simple nn that can learn XOR double sigmoid(double x) {return 1 / (1 + exp(-x)); } double dSigmoid(double x) {return x * (1-x); } double init_weights(){return ((double)rand()) / ((double)RAND_MAX); } void shuffle(int *array, size_t n){ if (n &amp;gt; 1){ size_t i; for (i = 0; i &amp;lt; n -1; i++){ size_t j = i + rand() / (RAND_MAX / (n - i) + 1); int t = array[j]; array[j] = array[i]; array[i] = t; } } } #define numInputs 2 #define numHiddenNodes 2 #define numOutputs 1 #define numTrainingSets 4 int main(void){ const double lr = 0.</description>
    </item>
  </channel>
</rss>
