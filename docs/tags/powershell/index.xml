<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Powershell on Owlglass</title>
    <link>https://kdbed.github.io/tags/powershell/</link>
    <description>Recent content in Powershell on Owlglass</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://kdbed.github.io/tags/powershell/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>PowerShell - Classes</title>
      <link>https://kdbed.github.io/posts/powershell_classes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/powershell_classes/</guid>
      <description>powershell - Classes Introduction PowerShell is an object-oriented language. When you run commands, see the output on your screen, those are objects.&#xA;Skeleton of a class called student:&#xA;class student { } Classes have properties that look like parameters that are attributes that describe that class. The example below shows a class called student with two properties; FirstName and LastName.&#xA;When you define a property, you should always define a type that sets a specific schema for what property values can hold.</description>
    </item>
    <item>
      <title>PowerShell - Clipboard to Array</title>
      <link>https://kdbed.github.io/posts/powershell_clipboard_to_array/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/powershell_clipboard_to_array/</guid>
      <description>(Get-Clipboard) -split &amp;#39;\t|\r?\n&amp;#39; </description>
    </item>
    <item>
      <title>PowerShell - Convert from Unix Time</title>
      <link>https://kdbed.github.io/posts/powershell_convert_from_unix_time/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/powershell_convert_from_unix_time/</guid>
      <description>Function to convert from Unix timestamps 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 function ConvertFrom-UnixTime { [CmdletBinding(DefaultParameterSetName = &amp;#34;Seconds&amp;#34;)] param ( [Parameter(Position = 0, ValueFromPipeline = $true, Mandatory = $true, ParameterSetName = &amp;#34;Seconds&amp;#34;)] [int] $Seconds, [Parameter(Position = 0, ValueFromPipeline = $true, Mandatory = $true, ParameterSetName = &amp;#34;Miliseconds&amp;#34;)] [bigint] $Miliseconds ) Begin { $date = (Get-Date &amp;#34;1970-01-01 00:00:00.</description>
    </item>
    <item>
      <title>PowerShell - Lengh limits AD attributes</title>
      <link>https://kdbed.github.io/posts/powershell_lengh_limits_ad_attributes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/powershell_lengh_limits_ad_attributes/</guid>
      <description>Determine character limits on AD attributes 1 2 dsquery * cn=Schema,cn=Configuration,dc=contoso,dc=com -filter &amp;#34;(LDAPDisplayName=department)&amp;#34; -attr rangeUpper dsquery * cn=Schema,cn=Configuration,dc=contoso,dc=com -filter &amp;#34;(LDAPDisplayName=department)&amp;#34; -attr rangeUpper </description>
    </item>
    <item>
      <title>PowerShell - Rust</title>
      <link>https://kdbed.github.io/posts/powershell_rust/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/powershell_rust/</guid>
      <description>Basic Rust Integration with powershell $rustPgm = @&amp;#34; #[no_mangle] pub extern &amp;#34;C&amp;#34; fn add_numbers(number1: i32, number2: i32) -&amp;gt; i32 { number1 + number2 } &amp;#34;@ $rustPgm | Set-Content -Encoding UTF8 .\lib.rs rustc .\lib.rs --crate-type dylib --crate-name powershell_to_rust ## start another PS so dll doesn&amp;#39;t get locked powershell -command { $definition = @&amp;#34; [DllImport(&amp;#34;powershell_to_rust.dll&amp;#34;)] public static extern Int32 add_numbers(Int32 number1, Int32 number2); &amp;#34;@ $target = Add-Type -MemberDefinition $definition -Name AddNum -PassThru $ans = $target::add_numbers(3, 8) write-host $ans } </description>
    </item>
    <item>
      <title>PowerShell - Script Encryption</title>
      <link>https://kdbed.github.io/posts/powershell_script_encryption/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/powershell_script_encryption/</guid>
      <description>Encrypt powershell Scripts Function to obfuscate code containing sensitive data:&#xA;function Encrypt-Script($path, $destination) { $script = Get-Content $path | Out-String $secure = ConvertTo-SecureString $script -asPlainText -force $export = $secure | ConvertFrom-SecureString Set-Content $destination $export &amp;#34;Script &amp;#39;$path&amp;#39; has been encrypted as &amp;#39;$destination&amp;#39;&amp;#34; } function Execute-EncryptedScript($path) { trap { &amp;#34;Decryption failed&amp;#34;; break } $raw = Get-Content $path $secure = ConvertTo-SecureString $raw $helper = New-Object system.Management.Automation.PSCredential(&amp;#34;test&amp;#34;, $secure) $plain = $helper.GetNetworkCredential().Password Invoke-Expression $plain } From: idera</description>
    </item>
    <item>
      <title>PowerShell - Search-ADAccount</title>
      <link>https://kdbed.github.io/posts/powershell_search_adaccount/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/powershell_search_adaccount/</guid>
      <description>Search-ADAccount shellgeek</description>
    </item>
    <item>
      <title>PowerShell - Splatting</title>
      <link>https://kdbed.github.io/posts/powershell_splatting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/powershell_splatting/</guid>
      <description>Splatting in powershell Splatting allows one to format and send arguments to cmdlets and functions. Typically use dash+parameter name+argument&#xA;Copy-Item -Path &amp;#34;Testfile.txt&amp;#34; -Destination &amp;#34;CopiedFile.txt&amp;#34; -WhatIf -force -Recurse Copy-Item ` -Path &amp;#34;Testfile.txt&amp;#34; ` -Destination &amp;#34;CopiedFile.txt&amp;#34; ` -WhatIf ` -force ` Instead you can splat a parameter set. First create a hashtable containing key/value pairs of each parameter and parameter argument. Then pass that set of parameters to the command with @&amp;lt;hashtablename&amp;gt;</description>
    </item>
    <item>
      <title>PowerShell - Test Credentials</title>
      <link>https://kdbed.github.io/posts/powershell_test_credentials/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/powershell_test_credentials/</guid>
      <description>Testing credentials 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 function Test-Cred { [CmdletBinding()] [OutputType([String])] Param ( [Parameter( Mandatory = $false, ValueFromPipeLine = $true, ValueFromPipelineByPropertyName = $true )] [Alias( &amp;#39;PSCredential&amp;#39; )] [ValidateNotNull()] [System.</description>
    </item>
    <item>
      <title>PowerShell - Writing cmdlets in C#</title>
      <link>https://kdbed.github.io/posts/powershell_writing_cmdlets_in_c/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/powershell_writing_cmdlets_in_c/</guid>
      <description>Writing powershell cmdlets in C# source: dotnetninja&#xA;Overview create a new class that derives from one of two base classes (Cmdlet or PsCmdlet), add properties to the class to accept your parameters, override one or more methods in the base class to provide your functionality, and decorate the class and properties with a few attributes.&#xA;cmdlet name all defined in constants in the C# reference library&#xA;VerbsCommon: Add, Clear, Close, Copy, Enter, Exit, Find, Format, Get, Hide, Join, Lock, Move, New, Open, Optimize, Pop, Push, Redo, Remove, Rename, Reset, Resize, Search, Select, Set, Show, Skip, Split, Step, Switch, Undo, Unlock, Watch</description>
    </item>
  </channel>
</rss>
