<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>powerShell on Braindump</title>
    <link>https://kdbed.github.io/tags/powershell/</link>
    <description>Recent content in powerShell on Braindump</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://kdbed.github.io/tags/powershell/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>PowerShell - Classes</title>
      <link>https://kdbed.github.io/posts/powershell_classes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/powershell_classes/</guid>
      <description>powershell - Classes Introduction PowerShell is an object-oriented language. When you run commands, see the output on your screen, those are objects.
Skeleton of a class called student:
class student { } Classes have properties that look like parameters that are attributes that describe that class. The example below shows a class called student with two properties; FirstName and LastName.
When you define a property, you should always define a type that sets a specific schema for what property values can hold.</description>
    </item>
    
    <item>
      <title>PowerShell - Clipboard to Array</title>
      <link>https://kdbed.github.io/posts/powershell_clipboard_to_array/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/powershell_clipboard_to_array/</guid>
      <description>(Get-Clipboard) -split &amp;#39;\t|\r?\n&amp;#39; </description>
    </item>
    
    <item>
      <title>PowerShell - Script Encryption</title>
      <link>https://kdbed.github.io/posts/powershell_script_encryption/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kdbed.github.io/posts/powershell_script_encryption/</guid>
      <description>Encrypt powershell Scripts Function to obfuscate code containing sensitive data:
function Encrypt-Script($path, $destination) { $script = Get-Content $path | Out-String $secure = ConvertTo-SecureString $script -asPlainText -force $export = $secure | ConvertFrom-SecureString Set-Content $destination $export &amp;#34;Script &amp;#39;$path&amp;#39; has been encrypted as &amp;#39;$destination&amp;#39;&amp;#34; } function Execute-EncryptedScript($path) { trap { &amp;#34;Decryption failed&amp;#34;; break } $raw = Get-Content $path $secure = ConvertTo-SecureString $raw $helper = New-Object system.Management.Automation.PSCredential(&amp;#34;test&amp;#34;, $secure) $plain = $helper.GetNetworkCredential().Password Invoke-Expression $plain } From: idera</description>
    </item>
    
  </channel>
</rss>
