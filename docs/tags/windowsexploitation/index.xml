<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>WindowsExploitation on Owlglass</title>
    <link>https://kdbed.github.io/tags/windowsexploitation/</link>
    <description>Recent content in WindowsExploitation on Owlglass</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://kdbed.github.io/tags/windowsexploitation/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>DLL Hijacking</title>
      <link>https://kdbed.github.io/posts/dll_hijacking/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/dll_hijacking/</guid>
      <description>Basic Ideas Windows DLL hijacking occurs when a trusted or legitimate application is tricked into loading an arbitrary DLL. Dll hijacking can be used to execute code, obtain persistence and escalate privileges, although privilege escalation is the least likely. hackTricks&#xA;Approaches There are different approaches to DLL hijacking, and success will be determined by how the application is set to load its DLLs.</description>
    </item>
    <item>
      <title>DLL Injection</title>
      <link>https://kdbed.github.io/posts/dll_injection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/dll_injection/</guid>
      <description>DLL Injection API Hooks https://www.apriorit.com/dev-blog/679-windows-dll-injection-for-api-hooks https://www.apriorit.com/dev-blog/160-apihooks%20https://www.apriorit.com/dev-blog/727-win-guide-to-hooking-windows-apis-with-python%20</description>
    </item>
    <item>
      <title>Pentest - Active Directory - DCSync</title>
      <link>https://kdbed.github.io/posts/pentest_active_directory_dcsync/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/pentest_active_directory_dcsync/</guid>
      <description>DCSync In BloodHound&#xA;GetChanges GetChangesAll 1 impacket-secretsdump &amp;#34;&amp;lt;domain&amp;gt;/user:password&amp;#34;@&amp;#34;dc.domain.com&amp;#34; hacktricks - DCSync</description>
    </item>
    <item>
      <title>Pentest - Active Directory - SID-History Injection</title>
      <link>https://kdbed.github.io/posts/pentest_active_directory_sid_history_injection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/pentest_active_directory_sid_history_injection/</guid>
      <description>SentinelOne&#xA;ADSecurity&#xA;MITRE</description>
    </item>
    <item>
      <title>Skeleton Key</title>
      <link>https://kdbed.github.io/posts/pentest_active_directory_skeleton_key/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kdbed.github.io/posts/pentest_active_directory_skeleton_key/</guid>
      <description>Skeleton Key A Skeleton Key is a stealthy backdoor attack where Mimikatz injects a patch into LSASS memory on a Domain Controller. This allows an attacker to authenticate as any domain user using a master password, in addition to their real credentials.&#xA;Overview Injects code into `lsass.exe` on a Domain Controller Leaves legitimate logins untouched Adds a universal password valid for all domain accounts Memory-resident: disappears on reboot Prerequisites SYSTEM-level access on a Domain Controller Ability to execute code and patch LSASS memory Mimikatz or similar tool Key Concepts LSASS: Local Security Authority Subsystem Service; handles authentication Patch: Modifies Kerberos/NTLM authentication providers in memory Backdoor password: An additional universal password accepted for all users Mimikatz Commands Load Skeleton Key Patch mimikatz # privilege::debug mimikatz # misc::skeleton Default password: mimikatz</description>
    </item>
  </channel>
</rss>
